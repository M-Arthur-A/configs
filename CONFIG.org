#+TITLE: Main config
#+STARTUP: overview

* Table of Contents :toc:
- [[#xmonad][Xmonad]]
  - [[#about-this-config][About This Config]]
  - [[#imports][Imports]]
  - [[#variables][Variables]]
  - [[#autostart-the-startup-hook][Autostart (The Startup Hook)]]
  - [[#gridselect][Gridselect]]
  - [[#scratchpads][Scratchpads]]
  - [[#layouts][Layouts]]
  - [[#workspaces][Workspaces]]
  - [[#managehook][Managehook]]
  - [[#keybindings][Keybindings]]
  - [[#main][Main]]
- [[#xmobar][Xmobar]]
- [[#conky][Conky]]
- [[#alacritty][Alacritty]]
- [[#fish][Fish]]
- [[#doom-emacs][Doom emacs]]
  - [[#beacon-addon][BEACON ADDON]]
  - [[#bookmarks-and-buffers][BOOKMARKS AND BUFFERS]]
  - [[#calendar][CALENDAR]]
  - [[#centaur-tabs][CENTAUR-TABS]]
  - [[#dashboard][DASHBOARD]]
  - [[#dired][DIRED]]
  - [[#doom-theme][DOOM THEME]]
  - [[#elfeed][ELFEED]]
  - [[#emms][EMMS]]
  - [[#emojis][EMOJIS]]
  - [[#evaluate-elisp-expressions][EVALUATE ELISP EXPRESSIONS]]
  - [[#eww][EWW]]
  - [[#fonts][FONTS]]
  - [[#insert-date][INSERT DATE]]
  - [[#ivy][IVY]]
  - [[#line-settin-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------gs][LINE SETTIN                                                                                                                                                                                                                   GS]]
  - [[#modeline][MODELINE]]
  - [[#mouse-support][MOUSE SUPPORT]]
  - [[#neotree][NEOTREE]]
  - [[#open-specific-files][OPEN SPECIFIC FILES]]
  - [[#or----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------g-mode][OR                                                                                                                                                                                                                            G MODE]]
  - [[#password-store][PASSWORD STORE]]
  - [[#perspective][PERSPECTIVE]]
  - [[#rainbow-mode][RAINBOW MODE]]
  - [[#re----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------gisters][RE                                                                                                                                                                                                                            GISTERS]]
  - [[#shells][SHELLS]]
  - [[#splits][SPLITS]]
  - [[#winner-mode][WINNER MODE]]
  - [[#zap-to-char][ZAP TO CHAR]]
- [[#picom][Picom]]

* Xmonad
** About This Config
#+CAPTION: XMonad Scrot
#+ATTR_HTML: :alt XMonad Scrot :title XMonad Scrot :align left
[[https://gitlab.com/dwt1/dotfiles/-/raw/master/.screenshots/dotfiles05-thumb.png]]

Xmonad is a dynamically tiling X11 window manager that is written and configured in Haskell.
- XMonad Official Website: [[https://xmonad.org][https://xmonad.org]]
- Haskell Official Website: https://haskell.org

This config is based on the xmonad configuration of Derek Taylor (DistroTube)
- DT's YouTube: [[http://www.youtube.com/c/DistroTube][http://www.youtube.com/c/DistroTube]]
- DT's GitLab:  [[http://www.gitlab.com/dwt1/][http://www.gitlab.com/dwt1/]]

Keep in mind, that my configs are purposely bloated with examples of what you can do with xmonad. It is written more as a study guide rather than a config that you should download and use.

NOTE: You will also need DT's xmobar config, which is located here: https://gitlab.com/dwt1/dotfiles/-/tree/master/.config/xmobar

** Imports
These are Haskell modules that we must import so that we can use their functions later in the config.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
  -- Base
import XMonad
import System.Directory
import System.IO (hPutStrLn)
import System.Exit (exitSuccess)
import qualified XMonad.StackSet as W

    -- Actions
import XMonad.Actions.CopyWindow (kill1)
import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
import XMonad.Actions.GridSelect
import XMonad.Actions.MouseResize
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
import XMonad.Actions.WindowGo (runOrRaise)
import XMonad.Actions.WithAll (sinkAll, killAll)
import qualified XMonad.Actions.Search as S
import XMonad.Actions.GroupNavigation

    -- Data
import Data.Char (isSpace, toUpper)
import Data.Maybe (fromJust)
import Data.Monoid
import Data.Maybe (isJust)
import Data.Tree
import qualified Data.Map as M

    -- Hooks
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
import XMonad.Hooks.EwmhDesktops  -- for some fullscreen events, also for xcomposite in obs.
import XMonad.Hooks.ManageDocks (avoidStruts, docksEventHook, manageDocks, ToggleStruts(..))
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat, doCenterFloat)
import XMonad.Hooks.ServerMode
import XMonad.Hooks.SetWMName
import XMonad.Hooks.WorkspaceHistory

    -- Layouts
import XMonad.Layout.Accordion
import XMonad.Layout.GridVariants (Grid(Grid))
import XMonad.Layout.SimplestFloat
import XMonad.Layout.Spiral
import XMonad.Layout.ResizableTile
import XMonad.Layout.Tabbed
import XMonad.Layout.ThreeColumns

    -- Layouts modifiers
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.Magnifier
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.ShowWName
import XMonad.Layout.Simplest
import XMonad.Layout.Spacing
import XMonad.Layout.SubLayouts
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import XMonad.Layout.WindowNavigation
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))

   -- Utilities
import XMonad.Util.Dmenu
import XMonad.Util.EZConfig (additionalKeysP)
import XMonad.Util.NamedScratchpad
import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
import XMonad.Util.SpawnOnce

   -- ColorScheme module (SET ONLY ONE!)
      -- Possible choice are:
      -- DoomOne
      -- Dracula
      -- GruvboxDark
      -- MonokaiPro
      -- Nord
      -- OceanicNext
      -- Palenight
      -- SolarizedDark
      -- SolarizedLight
      -- TomorrowNight
import Colors.Dracula
#+END_SRC

** Variables
It's nice to assign values to stuff that you will use more than once in the config. Setting values for things like font, terminal and editor means you only have to change the value here to make changes globally.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myFont :: String
myFont = "xft:SauceCodePro Nerd Font Mono:regular:size=9:antialias=true:hinting=true"

--myModMask :: KeyMask
--myModMask = mod4Mask        -- Sets modkey to super/windows key

myTerminal :: String
myTerminal = "alacritty"    -- Sets default terminal

myBrowser :: String
myBrowser = "firefox"  -- Sets default browser

myEmacs :: String
myEmacs = "emacsclient -c -a 'emacs' "  -- Makes emacs keybindings easier to type

myEditor :: String
myEditor = "emacsclient -c -a 'emacs' "  -- Sets emacs as editor
-- myEditor = myTerminal ++ " -e vim "    -- Sets vim as editor

myBorderWidth :: Dimension
myBorderWidth = 2           -- Sets border width for windows

myNormColor :: String       -- Border color of normal windows
myNormColor   = colorBack   -- This variable is imported from Colors.THEME

myFocusColor :: String      -- Border color of focused windows
myFocusColor  = color15     -- This variable is imported from Colors.THEME

windowCount :: X (Maybe String)
windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

-- Non-numeric num pad keys, sorted by number
numPadKeys = [ xK_KP_End,  xK_KP_Down,  xK_KP_Page_Down -- 1, 2, 3
             , xK_KP_Left, xK_KP_Begin, xK_KP_Right     -- 4, 5, 6
             , xK_KP_Home, xK_KP_Up,    xK_KP_Page_Up   -- 7, 8, 9
             , xK_KP_Insert] -- 0
numPadKeysP = [ "<KP_End>",  "<KP_Down>", "<KP_Page_Down>" -- 1, 2, 3
             , "<KP_Left>", "<KP_Begin>", "<KP_Right>"     -- 4, 5, 6
             , "<KP_Home>", "<KP_Up>",    "<KP_Page_Up>"   -- 7, 8, 9
             , "<KP_Insert>"] -- 0
#+END_SRC

** Autostart (The Startup Hook)
These are commands we want XMonad to execute on startup, such as running a compositor, setting our wallpaper, starting the emacs daemon, and starting our system tray and the applications that belong in it.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myStartupHook :: X ()
myStartupHook = do
    -- spawn "killall conky"   -- kill current conky on each restart
    spawn "killall trayer"  -- kill current trayer on each restart
#+END_SRC

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
    spawnOnce "lxsession"
    -- setting displays
    spawnOnce "xrandr --output HDMI-0 --off --output HDMI-1 --off --output HDMI-2 --off --output DP-0 --primary --mode 2560x1440 --pos 0x0 --rotate normal --output DP-1 --off --output DP-2 --off --output DP-3 --off --output DP-4 --mode 2560x1080 --pos 2560x180 --rotate normal --output DP-5 --off"
    spawnOnce "picom"
    spawnOnce "nm-applet"
    spawnOnce "volumeicon"
    spawnOnce "numlockx &"
    spawnOnce "klipper &"
    spawnOnce "xsetroot -cursor_name left_ptr"
    spawnOnce "/usr/bin/emacs --daemon" -- emacs daemon for the emacsclient
    spawnOnce "export QT_QPA_PLATFORMTHEME=\"qt5ct\"" -- emacs daemon for the emacsclient
#+END_SRC

We killed any running conky and trayer processes earlier in the autostart, so now we sleep for 2 seconds and then restart conky and trayer.
#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
    -- spawn ("sleep 2 && conky -c $HOME/.config/conky/xmonad/" ++ colorScheme ++ "-01.conkyrc")
    spawn ("sleep 2 && trayer --edge top --align right --widthtype request --padding 2 --SetDockType true --SetPartialStrut true --expand true --monitor 0 --transparent true --alpha 0 " ++ colorTrayer ++ " --height 22")
#+END_SRC

Select only =ONE= of the following four ways to set the wallpaper.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
    -- spawnOnce "xargs xwallpaper --stretch < ~/.cache/wall"
    -- spawnOnce "~/.fehbg &"  -- set last saved feh wallpaper
    spawnOnce "feh --randomize --bg-fill /usr/share/backgrounds/dtos-backgrounds/*"  -- feh set random wallpaper
    -- spawnOnce "nitrogen --restore &"   -- if you prefer nitrogen to feh
    setWMName "LG3D"
#+END_SRC

** Gridselect
GridSelect displays items (programs, open windows, etc.) in a 2D grid and lets the user select from it with the cursor/hjkl keys or the mouse.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myColorizer :: Window -> Bool -> X (String, String)
myColorizer = colorRangeFromClassName
                  (0x28,0x2c,0x34) -- lowest inactive bg
                  (0x28,0x2c,0x34) -- highest inactive bg
                  (0xc7,0x92,0xea) -- active bg
                  (0xc0,0xa7,0x9a) -- inactive fg
                  (0x28,0x2c,0x34) -- active fg

-- gridSelect menu layout
mygridConfig :: p -> GSConfig Window
mygridConfig colorizer = (buildDefaultGSConfig myColorizer)
    { gs_cellheight   = 40
    , gs_cellwidth    = 200
    , gs_cellpadding  = 6
    , gs_originFractX = 0.5
    , gs_originFractY = 0.5
    , gs_font         = myFont
    }

spawnSelected' :: [(String, String)] -> X ()
spawnSelected' lst = gridselect conf lst >>= flip whenJust spawn
    where conf = def
                   { gs_cellheight   = 40
                   , gs_cellwidth    = 200
                   , gs_cellpadding  = 6
                   , gs_originFractX = 0.5
                   , gs_originFractY = 0.5
                   , gs_font         = myFont
                   }

myAppGrid = [ ("Blender", "Blender")
            , ("Onlyoffice", "onlyoffice")
            , ("LibreOffice", "libreoffice")
            , ("Emacs", "emacsclient -c -a emacs")
            , ("Pycharm", "pycharm")
            , ("Eclipse", "eclipse")
            , ("VSCode", "code-oss")
            , ("Firefox", "firefox")
            , ("Gimp", "gimp")
            , ("KDEconnect", "kdeconnect-app")
            , ("Audacity", "audacity")]
#+END_SRC

** Scratchpads
Allows to have several floating scratchpads running different applications.  Import Util.NamedScratchpad and bind a key to namedScratchpadSpawnAction.  In the example below, I have created named scratchpads for:
+ alacritty -- my terminal
+ mocp -- a terminal music player
+ qalculate-gtk -- a nice calculator

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myScratchPads :: [NamedScratchpad]
myScratchPads = [ NS "terminal" spawnTerm findTerm manageTerm
                , NS "mocp" spawnMocp findMocp manageMocp
                , NS "calculator" spawnCalc findCalc manageCalc
                ]
  where
    spawnTerm  = myTerminal ++ " -t scratchpad"
    findTerm   = title =? "scratchpad"
    manageTerm = customFloating $ W.RationalRect l t w h
               where
                 h = 0.9
                 w = 0.9
                 t = 0.95 -h
                 l = 0.95 -w
    spawnMocp  = myTerminal ++ " -t mocp -e mocp"
    findMocp   = title =? "mocp"
    manageMocp = customFloating $ W.RationalRect l t w h
               where
                 h = 0.9
                 w = 0.9
                 t = 0.95 -h
                 l = 0.95 -w
    spawnCalc  = "qalculate-gtk"
    findCalc   = className =? "Qalculate-gtk"
    manageCalc = customFloating $ W.RationalRect l t w h
               where
                 h = 0.5
                 w = 0.4
                 t = 0.75 -h
                 l = 0.70 -w
#+END_SRC

** Layouts
Defining the layouts that I want to have available.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
--Makes setting the spacingRaw simpler to write. The spacingRaw module adds a configurable amount of space around windows.
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

-- Below is a variation of the above except no borders are applied
-- if fewer than two windows. So a single window has no gaps.
mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True

-- Defining a bunch of layouts, many that I don't use.
-- limitWindows n sets maximum number of windows displayed for layout.
-- mySpacing n sets the gap size around the windows.
tall     = renamed [Replace "tall"]
           $ smartBorders
           $ windowNavigation
           -- $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 12
           $ mySpacing 3
           $ ResizableTall 1 (3/100) (1/2) []
wideAccordion  = renamed [Replace "wideAccordion"]
           $ Mirror Accordion
floats   = renamed [Replace "floats"]
           $ smartBorders
           $ limitWindows 20 simplestFloat
--magnify  = renamed [Replace "magnify"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ magnifier
--           $ limitWindows 12
--           $ mySpacing 8
--           $ ResizableTall 1 (3/100) (1/2) []
--monocle  = renamed [Replace "monocle"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ limitWindows 20 Full
--grid     = renamed [Replace "grid"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ limitWindows 12
--           $ mySpacing 0
--           $ mkToggle (single MIRROR)
--           $ Grid (16/10)
--spirals  = renamed [Replace "spirals"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ mySpacing' 8
--           $ spiral (6/7)
--threeCol = renamed [Replace "threeCol"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ limitWindows 7
--           $ ThreeCol 1 (3/100) (1/2)
--threeRow = renamed [Replace "threeRow"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ limitWindows 7
           -- Mirror takes a layout and rotates it by 90 degrees.
           -- So we are applying Mirror to the ThreeCol layout.
--           $ Mirror
--           $ ThreeCol 1 (3/100) (1/2)
-- tabs     = renamed [Replace "tabs"]
           -- I cannot add spacing to this layout because it will
           -- add spacing between window and tabs which looks bad.
--           $ tabbed shrinkText myTabTheme
--tallAccordion  = renamed [Replace "tallAccordion"]
--           $ Accordion

-- setting colors for tabs layout and tabs sublayout.
--myTabTheme = def { fontName            = myFont
--                 , activeColor         = color15
--                 , inactiveColor       = color08
--                 , activeBorderColor   = color15
--                 , inactiveBorderColor = colorBack
--                 , activeTextColor     = colorBack
--                 , inactiveTextColor   = color16
--                 }

-- Theme for showWName which prints current workspace when you change workspaces.
myShowWNameTheme :: SWNConfig
myShowWNameTheme = def
    { swn_font              = "xft:Ubuntu:bold:size=60"
    , swn_fade              = 1.0
    , swn_bgcolor           = "#1c1f24"
    , swn_color             = "#ffffff"
    }

-- The layout hook
myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats
               $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
             where
               myDefaultLayout = withBorder myBorderWidth tall
                                 ||| wideAccordion
                                 ||| floats
                                 -- ||| noBorders tabs
                                 -- ||| magnify
                                 -- ||| noBorders monocle
                                 -- ||| grid
                                 -- ||| spirals
                                 -- ||| threeCol
                                 -- ||| threeRow
                                 -- ||| tallAccordion
#+END_SRC

** Workspaces
I have made my workspaces in xmobar "clickable." Clickable workspaces means the mouse can be used to switch workspaces. This requires /xdotool/ to be installed. You need to use UnsafeStdInReader instead of simply StdInReader in your xmobar config so you can pass actions to it.

#+begin_src haskell :tangle /home/arthur/.xmonad/xmonad.hs
-- myWorkspaces = [" 1 ", " 2 ", " 3 ", " 4 ", " 5 ", " 6 ", " 7 ", " 8 ", " 9 "]
myWorkspaces = [" main ", " dev ", " www ", " doc ", " mes ", " util ", " add1 ", " add2 ", " add3 "]
myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,
myWorkspacesNums = ["1","2","3","4","5","6","7","8","9"]

clickable ws = "<action=xdotool key alt+"++show i++">"++ws++"</action>"
    where i = fromJust $ M.lookup ws myWorkspaceIndices

#+END_SRC

** Managehook
Sets some rules for certain programs. Examples include forcing certain programs to always float, or to always appear on a certain workspace.  Forcing programs to a certain workspace with a doShift requires xdotool if you are using clickable workspaces. You need the className or title of the program. Use xprop to get this info.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
     -- 'doFloat' forces a window to float.  Useful for dialog boxes and such.
     -- using 'doShift ( myWorkspaces !! 7)' sends program to workspace 8!
     -- I'm doing it this way because otherwise I would have to write out the full
     -- name of my workspaces and the names would be very long if using clickable workspaces.
     [ className =? "confirm"         --> doFloat
     , className =? "file_progress"   --> doFloat
     , className =? "dialog"          --> doFloat
     , className =? "download"        --> doFloat
     , className =? "error"           --> doFloat
     --, className =? "Gimp"            --> doFloat
     --, className =? "Blender"         --> doFloat
     --, className =? "Eclipse"         --> doFloat
     , className =? "notification"    --> doFloat
     , className =? "pinentry-gtk-2"  --> doFloat
     , className =? "splash"          --> doFloat
     , className =? "toolbar"         --> doFloat
     , className =? "Yad"             --> doCenterFloat
     , className =? "klipper"         --> doCenterFloat
     --, className =? "tdrop"           --> doCenterFloat
     , title =? "Oracle VM VirtualBox Manager"  --> doFloat
     , title =? "Mozilla Firefox"     --> doShift ( myWorkspaces !! 1 )
     , className =? "Brave-browser"   --> doShift ( myWorkspaces !! 1 )
     , className =? "mpv"             --> doShift ( myWorkspaces !! 7 )
     --, className =? "Gimp"            --> doShift ( myWorkspaces !! 8 )
     , className =? "VirtualBox Manager" --> doShift  ( myWorkspaces !! 6 )
     , (className =? "firefox" <&&> resource =? "Dialog") --> doFloat  -- Float Firefox Dialog
     , isFullscreen -->  doFullFloat
     ] <+> namedScratchpadManageHook myScratchPads
#+END_SRC

** Keybindings
I am using the Xmonad.Util.EZConfig module which allows keybindings to be written in simpler, emacs-like format.  The Super/Windows key is 'M4'.  The ALT key is 'M1'.  SHIFT is 'S' and CTR is 'C'. Mod key is 'M'.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs

myKeys :: [(String, X ())]
myKeys =
    -- KB_GROUP Xmonad
        [ ("M4-C-r", spawn "xmonad --recompile")       -- Recompiles xmonad
        , ("M4-S-r", spawn "xmonad --restart")         -- Restarts xmonad
        , ("M4-S-l", io exitSuccess)                   -- Quits xmonad
        , ("M4-l", spawn "slock")                      -- Lock screen
        , ("M4-<Space>", spawn "/home/arthur/Applications/keyboard_layout_switcher.sh") -- Switch layout ru/en

    -- KB_GROUP default alt+TAB functionality
        , ("M-<Tab>", nextMatch Backward (return True)) -- navigate aka alt+tab
        , ("M-S-<Tab>", spawn "rofi -show window -line-padding 4 -lines 6 -padding 50 -hide-scrollbar -show-icons -drun-icon-theme 'Arc-X-D' -font 'Droid Sans Regular 10'") -- get list of all open windows

    -- KB_GROUP Layouts
        , ("M4-<Tab>", sendMessage NextLayout)                                  -- Switch to next layout
        , ("M-S-m", sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts) -- Toggles noborder/full

    -- KB_GROUP Increase/decrease windows in the master pane or the stack
        , ("M-S-<Up>", sendMessage (IncMasterN 1))      -- Increase # of clients master pane
        , ("M-S-<Down>", sendMessage (IncMasterN (-1))) -- Decrease # of clients master pane
        , ("M-C-<Up>", increaseLimit)                   -- Increase # of windows
        , ("M-C-<Down>", decreaseLimit)                 -- Decrease # of windows

    -- KB_GROUP Window resizing
        , ("M-M4-h", sendMessage Shrink)                -- Shrink horiz window width
        , ("M-M4-l", sendMessage Expand)                -- Expand horiz window width
        , ("M-M4-j", sendMessage MirrorShrink)          -- Shrink vert window width
        , ("M-M4-k", sendMessage MirrorExpand)          -- Expand vert window width

    -- KB_GROUP numpad layouts
        --, ("M-<KP_End>", spawn "dolphin")
        --, ("M-<KP_Down>", spawn "dolphin")
        --, ("M-<KP_Page_Down>", spawn "dolphin")
        --, ("M-<KP_Left>", spawn "dolphin")
        --, ("M-<KP_Begin>", spawn "dolphin")
        --, ("M-<KP_Right>", spawn "dolphin")
        --, ("M-<KP_Home>", spawn "dolphin")
        --, ("M-<KP_Up>", spawn "dolphin")
        --, ("M-<KP_Page_Up>", spawn "dolphin")

    -- KB_GROUP Get Help
        , ("M-S-/", spawn "~/.xmonad/xmonad_keys.sh") -- Get list of keybindings
        , ("M-/", spawn "dtos-help")                  -- DTOS help/tutorial videos

    -- KB_GROUP Run Prompt
        , ("M-<Space>", spawn "dmenu_run -fn 'Noto Sans:bold:pixelsize=24' -i -p \"Run: \"") -- Dmenu

    -- KB_GROUP Other Dmenu Prompts
    -- In Xmonad and many tiling window managers, M-p is the default keybinding to
    -- launch dmenu_run, so I've decided to use M-p plus KEY for these dmenu scripts.
        , ("M-p h", spawn "dm-hub -fn 'Noto Sans:bold:pixelsize=24' -i")           -- allows access to all dmscripts
        , ("M-p a", spawn "dm-sounds -fn 'Noto Sans:bold:pixelsize=24' -i")        -- choose an ambient background
        , ("M-p b", spawn "dm-setbg -fn 'Noto Sans:bold:pixelsize=24' -i")         -- set a background
        , ("M-p c", spawn "dtos-colorscheme -fn 'Noto Sans:bold:pixelsize=24' -i") -- choose a colorscheme
        , ("M-p C", spawn "dm-colpick -fn 'Noto Sans:bold:pixelsize=24' -i")       -- pick color from our scheme
        , ("M-p e", spawn "dm-confedit -fn 'Noto Sans:bold:pixelsize=24' -i")      -- edit config files
        , ("M-p i", spawn "dm-maim -fn 'Noto Sans:bold:pixelsize=24' -i")          -- screenshots (images)
        , ("M-p k", spawn "dm-kill -fn 'Noto Sans:bold:pixelsize=24' -i")          -- kill processes
        , ("M-p m", spawn "dm-man -fn 'Noto Sans:bold:pixelsize=24' -i")           -- manpages
        , ("M-p n", spawn "dm-note -fn 'Noto Sans:bold:pixelsize=24' -i")          -- store one-line notes and copy them
        , ("M-p o", spawn "dm-bookman -fn 'Noto Sans:bold:pixelsize=24' -i")       -- qutebrowser bookmarks/history
        , ("M-p p", spawn "passmenu -fn 'Noto Sans:bold:pixelsize=24' -i")         -- passmenu
        , ("M-p q", spawn "dm-logout -fn 'Noto Sans:bold:pixelsize=24' -i")        -- logout menu
        , ("M-p r", spawn "dm-radio -fn 'Noto Sans:bold:pixelsize=24' -i")         -- listen to online radio
        , ("M-p s", spawn "dm-websearch -fn 'Noto Sans:bold:pixelsize=24' -i")     -- search various search engines
        , ("M-p t", spawn "dm-translate -fn 'Noto Sans:bold:pixelsize=24' -i")     -- translate text (Google Translate)

    -- KB_GROUP Useful programs to have a keybinding for launch
        , ("M-<Return>", spawn (myTerminal))
        , ("M-b", spawn (myBrowser))
        , ("M-a", spawn ("pamac-manager"))
        , ("M4-e", spawn ("dolphin"))
        -- , ("M1-h", spawn (myTerminal ++ " -e htop"))

    -- KB_GROUP Kill windows
        , ("M-q", kill1)     -- Kill the currently focused client
        , ("M-S-q", killAll)   -- Kill all windows on current workspace

    -- KB_GROUP Workspaces
        , ("M-.", nextScreen)  -- Switch focus to next monitor
        , ("M-,", prevScreen)  -- Switch focus to prev monitor
        , ("M-S-<KP_Add>", shiftTo Next nonNSP >> moveTo Next nonNSP)       -- Shifts focused window to next ws
        , ("M-S-<KP_Subtract>", shiftTo Prev nonNSP >> moveTo Prev nonNSP)  -- Shifts focused window to prev ws

    -- KB_GROUP Floating windows
        , ("M-f", sendMessage (T.Toggle "floats")) -- Toggles my 'floats' layout
        , ("M-t", withFocused $ windows . W.sink)  -- Push floating window back to tile
        , ("M-S-t", sinkAll)                       -- Push ALL floating windows to tile

    -- KB_GROUP Increase/decrease spacing (gaps)
        -- , ("M-C-j", decWindowSpacing 4)         -- Decrease window spacing
        -- , ("M-C-k", incWindowSpacing 4)         -- Increase window spacing
        -- , ("M-C-h", decScreenSpacing 4)         -- Decrease screen spacing
        -- , ("M-C-l", incScreenSpacing 4)         -- Increase screen spacing

    -- KB_GROUP Grid Select (CTR-g followed by a key)
        , ("M-g g", spawnSelected' myAppGrid)                 -- grid select favorite apps
        , ("M-g t", goToSelected $ mygridConfig myColorizer)  -- goto selected window
        , ("M-g b", bringSelected $ mygridConfig myColorizer) -- bring selected window

    -- KB_GROUP Windows navigation
        , ("M-m", windows W.focusMaster)  -- Move focus to the master window
        , ("M-j", windows W.focusDown)    -- Move focus to the next window
        , ("M-k", windows W.focusUp)      -- Move focus to the prev window
        -- , ("M-S-m", windows W.swapMaster) -- Swap the focused window and the master window
        , ("M-S-j", windows W.swapDown)   -- Swap focused window with next window
        , ("M-S-k", windows W.swapUp)     -- Swap focused window with prev window
        , ("M-<Backspace>", promote)      -- Moves focused window to master, others maintain order
        , ("M-S-<Tab>", rotSlavesDown)    -- Rotate all windows except master and keep focus in place
        , ("M-C-<Tab>", rotAllDown)       -- Rotate all the windows in the current stack

    -- KB_GROUP Sublayouts
    -- This is used to push windows to tabbed sublayouts, or pull them out of it.
        , ("M-C-h", sendMessage $ pullGroup L)
        , ("M-C-l", sendMessage $ pullGroup R)
        , ("M-C-k", sendMessage $ pullGroup U)
        , ("M-C-j", sendMessage $ pullGroup D)
        , ("M-C-m", withFocused (sendMessage . MergeAll))
        -- , ("M-C-u", withFocused (sendMessage . UnMerge))
        , ("M-C-/", withFocused (sendMessage . UnMergeAll))
        , ("M-C-.", onGroup W.focusUp')    -- Switch focus to next tab
        , ("M-C-,", onGroup W.focusDown')  -- Switch focus to prev tab

    -- KB_GROUP Scratchpads
    -- Toggle show/hide these programs.  They run on a hidden workspace.
    -- When you toggle them to show, it brings them to your current workspace.
    -- Toggle them to hide and it sends them back to hidden workspace (NSP).
        , ("M-s t", namedScratchpadAction myScratchPads "terminal")
        , ("M-s m", namedScratchpadAction myScratchPads "mocp")
        , ("M-s c", namedScratchpadAction myScratchPads "calculator")

    -- KB_GROUP Controls for mocp music player (SUPER-u followed by a key)
        , ("M-u p", spawn "mocp --play")
        , ("M-u l", spawn "mocp --next")
        , ("M-u h", spawn "mocp --previous")
        , ("M-u <Space>", spawn "mocp --toggle-pause")

    -- KB_GROUP Emacs (SUPER-e followed by a key)
        , ("M-e e", spawn (myEmacs ++ ("--eval '(dashboard-refresh-buffer)'")))   -- emacs dashboard
        , ("M-e c", spawn (myEmacs ++ ("/home/arthur/CONFIG.org")))   -- onen CONFIG.ORG
        , ("M-e b", spawn (myEmacs ++ ("--eval '(ibuffer)'")))   -- list buffers
        , ("M-e d", spawn (myEmacs ++ ("--eval '(dired nil)'"))) -- dired
        , ("M-e i", spawn (myEmacs ++ ("--eval '(erc)'")))       -- erc irc client
        , ("M-e n", spawn (myEmacs ++ ("--eval '(elfeed)'")))    -- elfeed rss
        , ("M-e s", spawn (myEmacs ++ ("--eval '(eshell)'")))    -- eshell
        , ("M-e t", spawn (myEmacs ++ ("--eval '(mastodon)'")))  -- mastodon.el
        , ("M-e v", spawn (myEmacs ++ ("--eval '(+vterm/here nil)'"))) -- vterm if on Doom Emacs
        , ("M-e w", spawn (myEmacs ++ ("--eval '(doom/window-maximize-buffer(eww \"distro.tube\"))'"))) -- eww browser if on Doom Emacs
        , ("M-e a", spawn (myEmacs ++ ("--eval '(emms)' --eval '(emms-play-directory-tree \"~/Music/\")'")))

    -- KB_GROUP Multimedia Keys
        , ("<XF86AudioPlay>", spawn "mocp --play")
        , ("<XF86AudioPrev>", spawn "mocp --previous")
        , ("<XF86AudioNext>", spawn "mocp --next")
        , ("<XF86AudioMute>", spawn "amixer set Master toggle")
        , ("<XF86AudioLowerVolume>", spawn "amixer set Master 5%- unmute")
        , ("<XF86AudioRaiseVolume>", spawn "amixer set Master 5%+ unmute")
        , ("<XF86HomePage>", spawn "qutebrowser https://google.com")
        , ("<XF86Search>", spawn "dm-websearch")
        , ("<XF86Mail>", runOrRaise "thunderbird" (resource =? "thunderbird"))
        , ("<XF86Calculator>", runOrRaise "qalculate-gtk" (resource =? "qalculate-gtk"))
        , ("<XF86Eject>", spawn "toggleeject")
        , ("<Print>", spawn "dm-maim")
        ]
        ++ -- numpad switching workspaces
        [ (otherModMasks ++ "M-" ++ key, action tag)
          | (tag, key)  <- zip myWorkspaces numPadKeysP
        , (otherModMasks, action) <- [ ("", windows . W.greedyView) -- or W.view
                                     , ("S-", windows . W.shift)]
        ]

    -- The following lines are needed for named scratchpads.
          where nonNSP          = WSIs (return (\ws -> W.tag ws /= "NSP"))
                nonEmptyNonNSP  = WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))
-- END_KEYS
#+END_SRC

** Main
This is the "main" of XMonad. This where everything in our configs comes together and works.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
main :: IO ()
main = do
    -- Launching three instances of xmobar on their monitors.
    xmproc0 <- spawnPipe ("xmobar -x 0 $HOME/.config/xmobar/" ++ colorScheme ++ "-xmobarrc")
    xmproc1 <- spawnPipe ("xmobar -x 1 $HOME/.config/xmobar/" ++ colorScheme ++ "-xmobarrc")
    xmproc2 <- spawnPipe ("xmobar -x 2 $HOME/.config/xmobar/" ++ colorScheme ++ "-xmobarrc")
    -- the xmonad, ya know...what the WM is named after!
    xmonad $ ewmh def
        { manageHook         = myManageHook <+> manageDocks
        , handleEventHook    = docksEventHook
                               -- Uncomment this line to enable fullscreen support on things like YouTube/Netflix.
                               -- This works perfect on SINGLE monitor systems. On multi-monitor systems,
                               -- it adds a border around the window if screen does not have focus. So, my solution
                               -- is to use a keybinding to toggle fullscreen noborders instead.  (M-<Space>)
                               -- <+> fullscreenEventHook
        --, modMask            = myModMask
        , terminal           = myTerminal
        , startupHook        = myStartupHook
        , layoutHook         = showWName' myShowWNameTheme $ myLayoutHook
        , workspaces         = myWorkspaces
        , borderWidth        = myBorderWidth
        , normalBorderColor  = myNormColor
        , focusedBorderColor = myFocusColor
        , logHook = dynamicLogWithPP $ namedScratchpadFilterOutWorkspacePP $ xmobarPP
              -- XMOBAR SETTINGS
              { ppOutput = \x -> hPutStrLn xmproc0 x   -- xmobar on monitor 1
                              >> hPutStrLn xmproc1 x   -- xmobar on monitor 2
                              >> hPutStrLn xmproc2 x   -- xmobar on monitor 3
                -- Current workspace
              , ppCurrent = xmobarColor color06 "" . wrap
                            ("<box type=Bottom width=2 mb=2 color=" ++ color06 ++ ">") "</box>"
                -- Visible but not current workspace
              , ppVisible = xmobarColor color06 "" . clickable
                -- Hidden workspace
              , ppHidden = xmobarColor color05 "" . wrap
                           ("<box type=Top width=2 mt=2 color=" ++ color05 ++ ">") "</box>" . clickable
                -- Hidden workspaces (no windows)
              , ppHiddenNoWindows = xmobarColor color05 ""  . clickable
                -- Title of active window
              , ppTitle = xmobarColor color16 "" . shorten 60
                -- Separator character
              , ppSep =  "<fc=" ++ color09 ++ "> <fn=1>|</fn> </fc>"
                -- Urgent workspace
              , ppUrgent = xmobarColor color02 "" . wrap "!" "!"
                -- Adding # of windows on current workspace to the bar
              , ppExtras  = [windowCount]
                -- order of things in xmobar
              , ppOrder  = \(ws:l:t:ex) -> [ws,l]++ex++[t]
              }
        } `additionalKeysP` myKeys
#+END_SRC
* Xmobar
Xmobar (http://projects.haskell.org/xmobar/)
This is the default xmobar configuration for DTOS.
This config is packaged in the DTOS repo as dtos-xmobar
Dependencies: otf-font-awesome ttf-mononoki ttf-ubuntu-font-family trayer
Also depends on scripts from dtos-local-bin from the dtos-core-repo.

#+BEGIN_SRC haskell :tangle /home/arthur/.config/xmobar/xmobarrc
Config { font            = "xft:Ubuntu:weight=bold:pixelsize=11:antialias=true:hinting=true"
       , additionalFonts = [ "xft:Mononoki:pixelsize=11:antialias=true:hinting=true"
                           , "xft:Font Awesome 6 Free Solid:pixelsize=12"
                           , "xft:Font Awesome 6 Brands:pixelsize=12"
                           ]
       , bgColor      = "#282c34"
       , fgColor      = "#ff6c6b"
       -- Position TopSize and BottomSize take 3 arguments:
       --   an alignment parameter (L/R/C) for Left, Right or Center.
       --   an integer for the percentage width, so 100 would be 100%.
       --   an integer for the minimum pixel height for xmobar, so 24 would force a height of at least 24 pixels.
       --   NOTE: The height should be the same as the trayer (system tray) height.
       , position     = TopSize L 100 24
       , lowerOnStart = True
       , hideOnStart  = False
       , allDesktops  = True
       , persistent   = True
       , iconRoot     = ".xmonad/xpm/"  -- default: "."
       , commands = [
                        -- Echos a "penguin" icon in front of the kernel output.
                      Run Com "echo" ["<fn=3>\xf17c</fn>"] "penguin" 3600
                        -- Get kernel version (script found in .local/bin)
                    , Run Com ".local/bin/kernel" [] "kernel" 36000
                        -- Cpu usage in percent
                    , Run Cpu ["-t", "<fn=2>\xf108</fn>  cpu: (<total>%)","-H","50","--high","red"] 20
                        -- Ram used number and percent
                    , Run Memory ["-t", "<fn=2>\xf233</fn>  mem: <used>M (<usedratio>%)"] 20
                        -- Disk space free
                    , Run DiskU [("/", "<fn=2>\xf0c7</fn>  hdd: <free> free")] [] 60
                        -- Echos an "up arrow" icon in front of the uptime output.
                    , Run Com "echo" ["<fn=2>\xf0aa</fn>"] "uparrow" 3600
                        -- Uptime
                    -- , Run Uptime ["-t", "uptime: <days>d <hours>h"] 360
                        -- Echos a "bell" icon in front of the pacman updates.
                    -- , Run Com "echo" ["<fn=2>\xf0f3</fn>"] "bell" 3600
                        -- Check for pacman updates (script found in .local/bin)
                    -- , Run Com ".local/bin/pacupdate" [] "pacupdate" 36000
                        -- Echos a "battery" icon in front of the pacman updates.
                    -- , Run Com "echo" ["<fn=2>\xf242</fn>"] "baticon" 3600
                        -- Battery
                    -- , Run BatteryP ["BAT0"] ["-t", "<acstatus><watts> (<left>%)"] 360
                        -- Time and date
                    , Run Date "<fn=2>\xf017</fn>  %b %d %Y - (%H:%M) " "date" 50
                        -- Script that dynamically adjusts xmobar padding depending on number of trayer icons.
                    , Run Com ".config/xmobar/trayer-padding-icon.sh" [] "trayerpad" 20
                        -- Prints out the left side items such as workspaces, layout, etc.
                    , Run UnsafeStdinReader
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = " <icon=haskell_20.xpm/>   <fc=#666666>|</fc> %UnsafeStdinReader% }{ <box type=Bottom width=2 mb=2 color=#51afef><fc=#51afef>%penguin%  <action=`alacritty -e htop`>%kernel%</action> </fc></box>    <box type=Bottom width=2 mb=2 color=#ecbe7b><fc=#ecbe7b><action=`alacritty -e htop`>%cpu%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#ff6c6b><fc=#ff6c6b><action=`alacritty -e htop`>%memory%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#a9a1e1><fc=#a9a1e1><action=`alacritty -e htop`>%disku%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#98be65><fc=#98be65>%uparrow%  <action=`alacritty -e htop`>%uptime%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#c678dd><fc=#c678dd>%bell%  <action=`alacritty -e sudo pacman -Syu`>%pacupdate%</action></fc></box>   <box type=Bottom width=2 mb=2 color=#da8548><fc=#da8548>%baticon%  <action=`alacritty -e sudo pacman -Syu`>%battery%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#46d9ff><fc=#46d9ff><action=`emacsclient -c -a 'emacs' --eval '(doom/window-maximize-buffer(dt/year-calendar))'`>%date%</action></fc></box> %trayerpad%"
       }
#+END_SRC

#+BEGIN_SRC haskell :tangle /home/arthur/.config/xmobar/dracula-xmobarrc
-- Xmobar (http://projects.haskell.org/xmobar/)
-- This is one of the xmobar configurations for DTOS.
-- This config is packaged in the DTOS repo as 'dtos-xmobar'
-- Color scheme: Dracula
-- Dependencies:
   -- otf-font-awesome
   -- ttf-mononoki
   -- ttf-ubuntu-font-family
   -- htop
   -- emacs
   -- pacman (Arch Linux)
   -- trayer
   -- 'dtos-local-bin' (from dtos-core-repo)

Config { font            = "xft:Ubuntu:weight=bold:pixelsize=11:antialias=true:hinting=true"
       , additionalFonts = [ "xft:Mononoki:pixelsize=11:antialias=true:hinting=true"
                           , "xft:Font Awesome 6 Free Solid:pixelsize=12"
                           , "xft:Font Awesome 6 Brands:pixelsize=12"
                           ]
       , bgColor      = "#282a36"
       , fgColor      = "#f8f8f2"
       -- Position TopSize and BottomSize take 3 arguments:
       --   an alignment parameter (L/R/C) for Left, Right or Center.
       --   an integer for the percentage width, so 100 would be 100%.
       --   an integer for the minimum pixel height for xmobar, so 24 would force a height of at least 24 pixels.
       --   NOTE: The height should be the same as the trayer (system tray) height.
       , position       = TopSize L 100 24
       , lowerOnStart = True
       , hideOnStart  = False
       , allDesktops  = True
       , persistent   = True
       , iconRoot     = ".xmonad/xpm/"  -- default: "."
       , commands = [
                        -- Echos a "penguin" icon in front of the kernel output.
                      Run Com "echo" ["<fn=3>\xf17c</fn>"] "penguin" 3600
                        -- Get kernel version (script found in .local/bin)
                    , Run Com ".local/bin/kernel" [] "kernel" 36000
                        -- Cpu usage in percent
                    , Run Cpu ["-t", "<fn=2>\xf108</fn>  cpu: (<total>%)","-H","50","--high","red"] 20
                        -- Ram used number and percent
                    , Run Memory ["-t", "<fn=2>\xf233</fn>  mem: <used>M (<usedratio>%)"] 20
                        -- Disk space free
                    , Run DiskU [("/", "<fn=2>\xf0c7</fn>  hdd: <free> free")] [] 60
                        -- Echos an "up arrow" icon in front of the uptime output.
                    -- , Run Com "echo" ["<fn=2>\xf0aa</fn>"] "uparrow" 3600
                        -- Uptime
                    -- , Run Uptime ["-t", "uptime: <days>d <hours>h"] 360
                        -- Echos a "bell" icon in front of the pacman updates.
                    , Run Com "echo" ["<fn=2>\xf0f3</fn>"] "bell" 3600
                        -- Check for pacman updates (script found in .local/bin)
                    , Run Com ".local/bin/pacupdate" [] "pacupdate" 36000
                        -- Echos a "battery" icon in front of the pacman updates.
                    -- , Run Com "echo" ["<fn=2>\xf242</fn>"] "baticon" 3600
                        -- Battery
                    -- , Run BatteryP ["BAT0"] ["-t", "<acstatus><watts> (<left>%)"] 360
                        -- Time and date
                    , Run Date "<fn=2>\xf017</fn>  %b %d %Y - (%H:%M) " "date" 50
                        -- Script that dynamically adjusts xmobar padding depending on number of trayer icons.
                    , Run Com ".config/xmobar/trayer-padding-icon.sh" [] "trayerpad" 20
                        -- Prints out the left side items such as workspaces, layout, etc.
                    , Run UnsafeStdinReader
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = " <icon=haskell_20.xpm/>   <fc=#666666>|</fc> %UnsafeStdinReader% }{ <box type=Bottom width=2 mb=2 color=#bd93f9><fc=#bd93f9>%penguin%  %kernel%</fc></box>    <box type=Bottom width=2 mb=2 color=#f1fa8c><fc=#f1fa8c><action=`alacritty -e htop`>%cpu%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#ff5555><fc=#ff5555><action=`alacritty -e htop`>%memory%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#5af78e><fc=#5af78e>%disku%</fc></box>        <box type=Bottom width=2 mb=2 color=#8be9fd><fc=#8be9fd>%bell%  <action=`alacritty -e sudo pacman -Syu`>%pacupdate%</action></fc></box>   <box type=Bottom width=2 mb=2 color=#caa9fa><fc=#caa9fa><action=`emacsclient -c -a 'emacs' --eval '(doom/window-maximize-buffer(dt/year-calendar))'`>%date%</action></fc></box> %trayerpad%"
       }

#+END_SRC
* Conky
#+BEGIN_SRC haskell :tangle /home/arthur/.config/conky/xmonad/dracula-01.conkyrc
--[[
###################################
##  dracula-01.conkyrc (XMonad)  ##
###################################
]]

conky.config = {

	--Various settings
	background = true, 							-- forked to background
	cpu_avg_samples = 2,						-- The number of samples to average for CPU monitoring.
	diskio_avg_samples = 10,					-- The number of samples to average for disk I/O monitoring.
	double_buffer = true,						-- Use the Xdbe extension? (eliminates flicker)
	if_up_strictness = 'address',				-- how strict if testing interface is up - up, link or address
	net_avg_samples = 2,						-- The number of samples to average for net data
	no_buffers = true,							-- Subtract (file system) buffers from used memory?
	temperature_unit = 'fahrenheit',			-- fahrenheit or celsius
	text_buffer_size = 2048,					-- size of buffer for display of content of large variables - default 256
	update_interval = 1,						-- update interval
	imlib_cache_size = 0,                       -- disable image cache to get a new spotify cover per song

	-- Placement (Conky on MIDDLE of THREE monitors at 1920x1080)
	--alignment = 'top_left',		                -- top_left,top_middle,top_right,bottom_left,bottom_middle,bottom_right,
	--gap_x = 3540,                               -- pixels between right or left border
	--gap_y = 70,									-- pixels between bottom or left border

    -- Placement (For SINGLE monitor users!)
	alignment = 'top_right',		            -- top_left,top_middle,top_right,bottom_left,bottom_middle,bottom_right,
	gap_x = 50,								-- pixels between right or left border
	gap_y = 70,								-- pixels between bottom or left border

    -- Size
    minimum_height = 200,						-- minimum height of window
	minimum_width = 260,						-- minimum width of window
	maximum_width = 260,						-- maximum width of window

	--Graphical
	border_inner_margin = 5, 					-- margin between border and text
	border_outer_margin = 5, 					-- margin between border and edge of window
	border_width = 0, 							-- border width in pixels
	default_bar_width = 260,					-- default is 0 - full width
	default_bar_height = 10,					-- default is 6
	default_gauge_height = 25,					-- default is 25
	default_gauge_width =40,					-- default is 40
	default_graph_height = 40,					-- default is 25
	default_graph_width = 153,					-- default is 0 - full width
	default_shade_color = '#000000',			-- default shading colour
	default_outline_color = '#000000',			-- default outline colour
	draw_borders = false,						-- draw borders around text
	draw_graph_borders = true,					-- draw borders around graphs
	draw_shades = false,						-- draw shades
	draw_outline = false,						-- draw outline
	stippled_borders = 0,						-- dashing the border

	--Textual
	format_human_readable = true,				-- KiB, MiB rather then number of bytes
	font  = 'Source Code Pro:bold:size=10',  	-- the default font used
	font2 = 'Raleway:bold:size=30',         	-- font for the time
	font3 = 'Ubuntu:size=14',               	-- font for the date
	font4 = 'Raleway:bold:size=9',              -- font for the keybindings heading
	max_text_width = 0,							-- 0 will make sure line does not get broken if width too smal
	max_user_text = 16384,						-- max text in conky default 16384
	override_utf8_locale = true,				-- force UTF8 requires xft
	short_units = true,							-- shorten units from KiB to k
	top_name_width = 21,						-- width for $top name value default 15
	top_name_verbose = false,					-- If true, top name shows the full command line of  each  process - Default value is false.
	uppercase = false,							-- uppercase or not
	use_spacer = 'none',						-- adds spaces around certain objects to align - default none
	use_xft = true,								-- xft font - anti-aliased font
	xftalpha = 1,								-- alpha of the xft font - between 0-1

	--Windows
	own_window = true,							-- create your own window to draw
	own_window_argb_value = 255,			    -- real transparency - composite manager required 0-255
	own_window_argb_visual = true,				-- use ARGB - composite manager required
	own_window_class = 'Conky',					-- manually set the WM_CLASS name for use with xprop
	own_window_colour = '#282a36',				-- set colour if own_window_transparent no
	own_window_transparent = false,				-- if own_window_argb_visual is true sets background opacity 0%
	own_window_title = 'xmonad_conky',			-- set the name manually
	own_window_type = 'desktop',				-- if own_window true options are: normal/override/dock/desktop/panel
	own_window_hints = 'undecorated,below,above,sticky,skip_taskbar,skip_pager',  -- if own_window true - just hints - own_window_type sets it

	--Colors (Dracula)
	color0 = '#bd93f9',
	color1 = '#f8f8f2',
	color2 = '#8be9fd',
	color2 = '#8be9fd',
	color3 = '#50fa7b',
};

conky.text = [[
${alignc}${color0}${font2}${time %H:%M}${font}
${voffset 6}${alignc}${color0}${font3}${time %b %d, %Y}${font}${color}
${voffset 18}${goto 12}${color3}CPU${goto 50}$cpu%
${color2}${goto 12}${cpubar 8,254}
${voffset 5}${goto 12}$font${color1}${top name 1}$alignr$color${top cpu 1}%
${goto 12}${color1}${top name 2}$alignr$color${top cpu 2}%
${goto 12}${color1}${top name 3}$alignr$color${top cpu 3}%
${voffset 14}${goto 12}${color3}RAM${goto 50}$mem/$memmax
${color2}${goto 12}${membar 8,254}${color}
${goto 12}${voffset 5}${color1}${top_mem name 1}$alignr$color${top_mem mem_res 1}
${goto 12}${color1}${top_mem name 2}$alignr$color${top_mem mem_res 2}
${goto 12}${color1}${top_mem name 3}$alignr$color${top_mem mem_res 3}
${voffset 18}${color1}${alignc}${font4}XMONAD KEYBINDINGS${font}${color}
${color1}${hr}${color}
${color1}[S]+[RET]${alignr}${color2}open terminal${color}
${color1}[S]+b${alignr}${color2}open qutebrowser${color}
${color1}[S]+[SHIFT]+[RET]${alignr}${color2}run prompt${color}
${color1}[S]+[SHIFT]+c${alignr}${color2}close window${color}
${color1}[S]+hjkl${alignr}${color2}move win focus${color}
${color1}[S]+[SHIFT]+hjkl${alignr}${color2}move window${color}
${color1}[S]+[1-9]${alignr}${color2}switch workspace${color}
${color1}[S]+[SHIFT]+[1-9]${alignr}${color2}send window${color}
${color1}[S]+h/l${alignr}${color2}shrink/expand${color}
${color1}${hr}${color}
${color1}[S]+e, e${alignr}${color2}launch emacs${color}
${color1}[S]+e, b${alignr}${color2}ibuffer${color}
${color1}[S]+e, d${alignr}${color2}dired${color}
${color1}[S]+e, n${alignr}${color2}elfeed${color}
${color1}[S]+e, s${alignr}${color2}eshell${color}
${color1}[S]+e, v${alignr}${color2}vterm${color}
${color1}${hr}${color}
${color1}[S]+p, h${alignr}${color2}dm-hub${color}
${color1}[S]+p, b${alignr}${color2}dm-setbg${color}
${color1}[S]+p, e${alignr}${color2}dm-confedit${color}
${color1}[S]+p, m${alignr}${color2}dm-man${color}
${color1}[S]+p, o${alignr}${color2}dm-bookman${color}
${color1}[S]+p, s${alignr}${color2}dm-websearch${color}
${color1}${hr}${color}
${color1}[S]+[SHIFT]+r${alignr}${color2}restart xmonad${color}
${color1}[S]+[SHIFT]+q${alignr}${color2}quit xmonad${color}
]];

#+END_SRC
* Alacritty
#+BEGIN_SRC yml :tangle /home/arthur/.config/alacritty/alacritty.yml
# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  #dimensions:
  #  columns: 0
  #  lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 6
    y: 6

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  #decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  #startup_mode: Windowed

  # Window title
  title: Alacritty

  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
  # Set this to `None` to use the default theme variant.
  #gtk_theme_variant: None

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  #multiplier: 3

  # Scroll to the bottom when new text is written to the terminal.
  #auto_scroll: false

# Spaces per Tab (changes require restart)
#
# This setting defines the width of a tab in cells.
#
# Some applications, like Emacs, rely on knowing about the width of a tab.
# To prevent unexpected behavior in these applications, it's also required to
# change the `it` value in terminfo when altering this setting.
#tabspaces: 8

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    family: CascadiaCode
    # family: Source Code Pro
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    # family: JetBrains Mono
    # family: UbuntuMono Nerd Font
    # family: Monofur Nerd Font
    # family: TerminessTTF Nerd Font
    # family: Mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Regular

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    family: CascadiaCode
    # family: Source Code Pro
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    # family: JetBrains Mono
    # family: UbuntuMono Nerd Font
    # family: Monofur Nerd Font
    # family: TerminessTTF Nerd Font
    # family: Mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: Source Code Pro
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    # family: JetBrains Mono
    # family: UbuntuMono Nerd Font
    # family: Monofuritalic Nerd Font Mono
    # family: TerminessTTF Nerd Font
    # family: Mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Italic

  # Bold italic font face
  bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: Source Code Pro
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    # family: JetBrains Mono
    # family: UbuntuMono Nerd Font
    # family: Monofuritalic Nerd Font Mono
    # family: TerminessTTF Nerd Font
    # family: Mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Bold Italic

  # Point size
  size: 16.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 1

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  #glyph_offset:
  #  x: 0
  #  y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  #use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

#######################################
##      START OF COLOR SCHEMES       ##
#######################################
schemes:
  ### Doom One ###
  DoomOne: &DoomOne
    primary:
      background: '#282c34'
      foreground: '#bbc2cf'
    cursor:
      text: CellBackground
      cursor: '#528bff'
    selection:
      text: CellForeground
      background: '#3e4451'
    normal:
      black:   '#1c1f24'
      red:     '#ff6c6b'
      green:   '#98be65'
      yellow:  '#da8548'
      blue:    '#51afef'
      magenta: '#c678dd'
      cyan:    '#5699af'
      white:   '#202328'
    bright:
      black:   '#5b6268'
      red:     '#da8548'
      green:   '#4db5bd'
      yellow:  '#ecbe7b'
      blue:    '#3071db'   # This is 2257a0 in Doom Emacs but I lightened it.
      magenta: '#a9a1e1'
      cyan:    '#46d9ff'
      white:   '#dfdfdf'

  ### Dracula ###
  Dracula: &Dracula
    primary:
      background: '#282a36'
      foreground: '#f8f8f2'
    cursor:
      text: CellBackground
      cursor: CellForeground
    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground
    search:
      matches:
        foreground: '#44475a'
        background: '#50fa7b'
      focused_match:
        foreground: '#44475a'
        background: '#ffb86c'
      bar:
        background: '#282a36'
        foreground: '#f8f8f2'
    line_indicator:
      foreground: None
      background: None
    selection:
      text: CellForeground
      background: '#44475a'
    normal:
      black:   '#000000'
      red:     '#ff5555'
      green:   '#50fa7b'
      yellow:  '#f1fa8c'
      blue:    '#bd93f9'
      magenta: '#ff79c6'
      cyan:    '#8be9fd'
      white:   '#bfbfbf'
    bright:
      black:   '#4d4d4d'
      red:     '#ff6e67'
      green:   '#5af78e'
      yellow:  '#f4f99d'
      blue:    '#caa9fa'
      magenta: '#ff92d0'
      cyan:    '#9aedfe'
      white:   '#e6e6e6'
    dim:
      black:   '#14151b'
      red:     '#ff2222'
      green:   '#1ef956'
      yellow:  '#ebf85b'
      blue:    '#4d5b86'
      magenta: '#ff46b0'
      cyan:    '#59dffc'
      white:   '#e6e6d1'

  ### Gruvbox dark ###
  GruvboxDark: &GruvboxDark
    # Default colors
    primary:
      # hard contrast: background = '0x1d2021'
      background: '#282828'
      # soft contrast: background = '0x32302f'
      foreground: '#ebdbb2'

    # Normal colors
    normal:
      black:   '#282828'
      red:     '#cc241d'
      green:   '#98971a'
      yellow:  '#d79921'
      blue:    '#458588'
      magenta: '#b16286'
      cyan:    '#689d6a'
      white:   '#a89984'

    # Bright colors
    bright:
      black:   '#928374'
      red:     '#fb4934'
      green:   '#b8bb26'
      yellow:  '#fabd2f'
      blue:    '#83a598'
      magenta: '#d3869b'
      cyan:    '#8ec07c'
      white:   '#ebdbb2'

### Monokai ###
  MonokaiPro: &MonokaiPro
    # Default colors
    primary:
      background: '#2D2A2E'
      foreground: '#FCFCFA'

    # Normal colors
    normal:
      black:   '#403E41'
      red:     '#FF6188'
      green:   '#A9DC76'
      yellow:  '#FFD866'
      blue:    '#FC9867'
      magenta: '#AB9DF2'
      cyan:    '#78DCE8'
      white:   '#FCFCFA'

    # Bright colors
    bright:
      black:   '#727072'
      red:     '#FF6188'
      green:   '#A9DC76'
      yellow:  '#FFD866'
      blue:    '#FC9867'
      magenta: '#AB9DF2'
      cyan:    '#78DCE8'
      white:   '#FCFCFA'

  ### Nord ###
  Nord: &Nord
    # Default colors
    primary:
      background: '#2E3440'
      foreground: '#D8DEE9'

    # Normal colors
    normal:
      black:   '#3B4252'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#88C0D0'
      white:   '#E5E9F0'

    # Bright colors
    bright:
      black:   '#4C566A'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#8FBCBB'
      white:   '#ECEFF4'

  ### Oceanic Next ###
  OceanicNext: &OceanicNext
    # Default colors
    primary:
      background: '#1b2b34'
      foreground: '#d8dee9'

    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text: '#1b2b34'
      cursor: '#ffffff'

    # Normal colors
    normal:
      black:   '#343d46'
      red:     '#EC5f67'
      green:   '#99C794'
      yellow:  '#FAC863'
      blue:    '#6699cc'
      magenta: '#c594c5'
      cyan:    '#5fb3b3'
      white:   '#d8dee9'

    # Bright colors
    bright:
      black:   '#343d46'
      red:     '#EC5f67'
      green:   '#99C794'
      yellow:  '#FAC863'
      blue:    '#6699cc'
      magenta: '#c594c5'
      cyan:    '#5fb3b3'
      white:   '#d8dee9'

  ### Palenight ###
  Palenight: &Palenight
    # Default colors
    primary:
      background: '#292d3e'
      foreground: '#d0d0d0'

    # Normal colors
    normal:
      black:   '#292d3e'
      red:     '#f07178'
      green:   '#c3e88d'
      yellow:  '#ffcb6b'
      blue:    '#82aaff'
      magenta: '#c792ea'
      cyan:    '#89ddff'
      white:   '#d0d0d0'

    # Bright colors
    bright:
      black:   '#434758'
      red:     '#ff8b92'
      green:   '#ddffa7'
      yellow:  '#ffe585'
      blue:    '#9cc4ff'
      magenta: '#e1acff'
      cyan:    '#a3f7ff'
      white:   '#ffffff'

  ### Solarized Dark ###
  SolarizedDark: &SolarizedDark
    # Default colors
    primary:
      background: '#002b36' # base03
      foreground: '#839496' # base0

    # Cursor colors
    cursor:
      text:   '#002b36' # base03
      cursor: '#839496' # base0

    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2

    # Bright colors
    bright:
      black:   '#002b36' # base03
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3

  ### Solarized Light ###
  SolarizedLight: &SolarizedLight
    # Default colors
    primary:
      background: '#fdf6e3' # base3
      foreground: '#657b83' # base00

    # Cursor colors
    cursor:
      text:   '#fdf6e3' # base3
      cursor: '#657b83' # base00

    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2

    # Bright colors
    bright:
      black:   '#002b36' # base03
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3

  ### Tomorrow Night ###
  TomorrowNight: &TomorrowNight
     # Default colors
    primary:
      background: '#1d1f21'
      foreground: '#c5c8c6'

    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text: '#1d1f21'
      cursor: '#ffffff'

    # Normal colors
    normal:
      black:   '#1d1f21'
      red:     '#cc6666'
      green:   '#b5bd68'
      yellow:  '#e6c547'
      blue:    '#81a2be'
      magenta: '#b294bb'
      cyan:    '#70c0ba'
      white:   '#373b41'

    # Bright colors
    bright:
      black:   '#666666'
      red:     '#ff3334'
      green:   '#9ec400'
      yellow:  '#f0c674'
      blue:    '#81a2be'
      magenta: '#b77ee0'
      cyan:    '#54ced6'
      white:   '#282a2e'

######################################################################
## SET THEME: Choose ONE color scheme from those in the above list. ##
## ###################################################################
# Available themes are:
# *DoomOne
# *Dracula
# *GruvboxDark
# *MonokaiPro
# *Nord
# *OceanicNext
# *Palenight
# *SolarizedLight
# *SolarizedDark
# *TomorrowNight

colors: *Dracula

#######################################
##       END OF COLOR SCHEMES        ##
#######################################

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
#visual_bell:
#  animation: EaseOutExpo
#  duration: 0
#  color: '#ffffff'

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
window.opacity: 0.90
# window.opacity: 0.80

#selection:
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  #save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
#dynamic_title: true

#cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  #style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  #unfocused_hollow: true

# Live config reload (changes require restart)
#live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# WinPTY backend (Windows only)
#
# Alacritty defaults to using the newer ConPTY backend if it is available,
# since it resolves a lot of bugs and is quite a bit faster. If it is not
# available, the the WinPTY backend will be used instead.
#
# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,
# even if the ConPTY backend is available.
#winpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false

  # Record all characters and escape sequences as test data.
  #ref_test: false

#mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  #hide_when_typing: false

  #url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux/BSD) xdg-open
    #   - (Windows) explorer
    #launcher:
    #  program: xdg-open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
    # (Windows, Linux, and BSD only)
  - { key: V,         mods: Control|Shift, action: Paste                       }
  - { key: C,         mods: Control|Shift, action: Copy                        }
  - { key: Insert,    mods: Shift,         action: PasteSelection              }
  - { key: Key0,      mods: Control,       action: ResetFontSize               }
  - { key: Equals,    mods: Control,       action: IncreaseFontSize            }
  - { key: Plus,      mods: Control,       action: IncreaseFontSize            }
  - { key: Minus,     mods: Control,       action: DecreaseFontSize            }
  - { key: F11,       mods: None,          action: ToggleFullscreen            }
  - { key: Paste,     mods: None,          action: Paste                       }
  - { key: Copy,      mods: None,          action: Copy                        }
  - { key: L,         mods: Control,       action: ClearLogNotice              }
  - { key: L,         mods: Control,       chars: "\x0c"                       }
  - { key: PageUp,    mods: None,          action: ScrollPageUp,   mode: ~Alt  }
  - { key: PageDown,  mods: None,          action: ScrollPageDown, mode: ~Alt  }
  - { key: Home,      mods: Shift,         action: ScrollToTop,    mode: ~Alt  }
  - { key: End,       mods: Shift,         action: ScrollToBottom, mode: ~Alt  }
#+END_SRC
* Fish
#+BEGIN_SRC  haskell :tangle /home/arthur/.config/fish/config.fish
### ADDIN                                                                                                                                                                                                                        G TO THE PATH
# First line removes the path; second line sets it.  Without the first line,
# your path                                                                                                                                                                                                                      gets massive and fish becomes very slow.
set -e fish_user_paths
set -U fish_user_paths $HOME/.local/bin $HOME/Applications $fish_user_paths

### EXPORT ###
set fish_                                                                                                                                                                                                                        greetin                                                                                                              g                                 # Supresses fish's intro messa                                              ge
set TERM "xterm-256color"                         # Sets the terminal type
set EDITOR "emacsclient -t -a ''"                 # $EDITOR use Emacs in terminal
set VISUAL "emacsclient -c -a emacs"              # $VISUAL use Emacs in                                                                                                                                                         GUI mode

### SET MANPA                                                                                                                                                                                                                    GER
### Uncomment only one of these!

### "bat" as manpa                                                                                                                                                                                                               ger
# set -x MANPA                                                                                                                                                                                                                   GER "sh -c 'col -bx | bat -l man -p'"

### "vim" as manpa                                                                                                                                                                                                               ger
# set -x MANPA                                                                                                                                                                                                                   GER '/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

### "nvim" as manpa                                                                                                                                                                                                              ger
set -x MANPA                                                                                                                                                                                                                     GER "nvim -c 'set ft=man' -"

### SET EITHER DEFAULT EMACS MODE OR VI MODE ###
function fish_user_key_bindin                                                                                                                                                                                                    gs
  # fish_default_key_bindin                                                                                                                                                                                                      gs
  fish_vi_key_bindin                                                                                                                                                                                                             gs
end
### END OF VI MODE ###

### AUTOCOMPLETE AND HI                                                                                                                                                                                                          GHLI                                                                                                                 GHT COLORS ###
set fish_color_normal brcyan
set fish_color_autosu                                                                                                                                                                                                            g                                                                                                                    gestion '#7d7d7d'
set fish_color_command brcyan
set fish_color_error '#ff6c6b'
set fish_color_param brcyan

### SPARK ###
set -                                                                                                                                                                                                                            g spark_version 1.0.0

complete -xc spark -n __fish_use_subcommand -a --help -d "Show usa                                                                                                                                                               ge help"
complete -xc spark -n __fish_use_subcommand -a --version -d "$spark_version"
complete -xc spark -n __fish_use_subcommand -a --min -d "Minimum ran                                                                                                                                                             ge value"
complete -xc spark -n __fish_use_subcommand -a --max -d "Maximum ran                                                                                                                                                             ge value"

function spark -d "sparkline                                                                                                                                                                                                     generator"
    if isatty
        switch "$ar                                                                                                                                                                                                              gv"
            case {,-}-v{ersion,}
                echo "spark version $spark_version"
            case {,-}-h{elp,}
                echo "usa                                                                                                                                                                                                        ge: spark [--min=<n> --max=<n>] <numbers...>  Draw sparklines"
                echo "examples:"
                echo "       spark 1 2 3 4"
                echo "       seq 100 | sort -R | spark"
                echo "       awk \\\$0=len                                                                                                                                                                                       gth spark.fish | spark"
            case \*
                echo $ar                                                                                                                                                                                                         gv | spark $ar                                                                                                       gv
        end
        return
    end

    command awk -v FS="[[:space:],]*" -v ar                                                                                                                                                                                      gv="$ar                                                                                                              gv" '
        BE                                                                                                                                                                                                                       GIN {
            min = match(ar                                                                                                                                                                                                       gv, /--min=[0-9]+/) ? substr(ar                                                                                      gv, RSTART + 6, RLEN                                                                                          GTH - 6) + 0 : ""
            max = match(ar                                                                                                                                                                                                       gv, /--max=[0-9]+/) ? substr(ar                                                                                      gv, RSTART + 6, RLEN                                                                                          GTH - 6) + 0 : ""
        }
        {
            for (i = j = 1; i <= NF; i++) {
                if ($i ~ /^--/) continue
                if ($i !~ /^-?[0-9]/) data[count + j++] = ""
                else {
                    v = data[count + j++] = int($i)
                    if (max == "" && min == "") max = min = v
                    if (max < v) max = v
                    if (min > v ) min = v
                }
            }
            count += j - 1
        }
        END {
            n = split(min == max && max ? "▅ ▅" : "▁ ▂ ▃ ▄ ▅ ▆ ▇ █", blocks, " ")
            scale = (scale = int(256 * (max - min) / (n - 1))) ? scale : 1
            for (i = 1; i <= count; i++)
                out = out (data[i] == "" ? " " : blocks[idx = int(256 * (data[i] - min) / scale) + 1])
            print out
        }
    '
end
### END OF SPARK ###


### FUNCTIONS ###
# Spark functions
function letters
    cat $ar                                                                                                                                                                                                                      gv | awk -vFS='' '{for(i=1;i<=NF;i++){ if($i~/[a-zA-Z]/) { w[tolower($i)]++} } }END{for(i in w) print i,w[i]}' | sort | cut -c 3- | spark | lolcat
    printf  '%s\n' 'abcdef                                                                                                                                                                                                       ghijklmnopqrstuvwxyz'  ' ' | lolcat
end

function commits
                                                                                                                                                                                                                                 git lo                                                                                                               g --author="$ar                                                                                               gv" --format=format:%ad --date=short | uniq -c | awk '{print $1}' | spark | lolcat
end

# Functions needed for !! and !$
function __history_previous_command
  switch (commandline -t)
  case "!"
    commandline -t $history[1]; commandline -f repaint
  case "*"
    commandline -i !
  end
end

function __history_previous_command_ar                                                                                                                                                                                           guments
  switch (commandline -t)
  case "!"
    commandline -t ""
    commandline -f history-token-search-backward
  case "*"
    commandline -i '$'
  end
end
# The bindin                                                                                                                                                                                                                     gs for !! and !$
if [ $fish_key_bindin                                                                                                                                                                                                            gs = "fish_vi_key_bindin                                                                                             gs" ];
  bind -Minsert ! __history_previous_command
  bind -Minsert '$' __history_previous_command_ar                                                                                                                                                                                guments
else
  bind ! __history_previous_command
  bind '$' __history_previous_command_ar                                                                                                                                                                                         guments
end

# Function for creatin                                                                                                                                                                                                           g a backup file
# ex: backup file.txt
# result: copies file as file.txt.bak
function backup --ar                                                                                                                                                                                                             gument filename
    cp $filename $filename.bak
end

# Function for copyin                                                                                                                                                                                                            g files and directories, even recursively.
# ex: copy DIRNAME LOCATIONS
# result: copies the directory and all of its contents.
function copy
    set count (count $ar                                                                                                                                                                                                         gv | tr -d \n)
    if test "$count" = 2; and test -d "$ar                                                                                                                                                                                       gv[1]"
	set from (echo $ar                                                                                                                                                                                                           gv[1] | trim-ri                                                                                                      ght /)
	set to (echo $ar                                                                                                                                                                                                             gv[2])
        command cp -r $from $to
    else
        command cp $ar                                                                                                                                                                                                           gv
    end
end

# Function for printin                                                                                                                                                                                                           g a column (splits input on whitespace)
# ex: echo 1 2 3 | coln 3
# output: 3
function coln
    while read -l input
        echo $input | awk '{print $'$ar                                                                                                                                                                                          gv[1]'}'
    end
end

# Function for printin                                                                                                                                                                                                           g a row
# ex: seq 3 | rown 3
# output: 3
function rown --ar                                                                                                                                                                                                               gument index
    sed -n "$index p"
end

# Function for i                                                                                                                                                                                                                 gnorin                                                                                                               g the first 'n' lines
# ex: seq 10 | skip 5
# results: prints everythin                                                                                                                                                                                                      g but the first 5 lines
function skip --ar                                                                                                                                                                                                               gument n
    tail +(math 1 + $n)
end

# Function for takin                                                                                                                                                                                                             g the first 'n' lines
# ex: seq 10 | take 5
# results: prints only the first 5 lines
function take --ar                                                                                                                                                                                                               gument number
    head -$number
end

# Function for or                                                                                                                                                                                                                g-a                                                                                                                  genda
function or                                                                                                                                                                                                                      g-search -d "send a search strin                                                                                     g to or                                                                                                       g-mode"
    set -l output (/usr/bin/emacsclient -a "" -e "(messa                                                                                                                                                                         ge \"%s\" (mapconcat #'substrin                                                                                      g-no-properties \
        (mapcar #'or                                                                                                                                                                                                             g-link-display-format \
        (or                                                                                                                                                                                                                      g-ql-query \
        :select #'or                                                                                                                                                                                                             g-                                                                                                                   get-headin                                                                                                    g \
        :from  (or                                                                                                                                                                                                               g-a                                                                                                                  genda-files) \
        :where (or                                                                                                                                                                                                               g-ql--query-strin                                                                                                    g-to-sexp \"$ar                                                                                               gv\"))) \
        \"
    \"))")
    printf $output
end

### END OF FUNCTIONS ###


### ALIASES ###
alias clear='/bin/clear; echo; echo; seq 1 (tput cols) | sort -R | spark | lolcat; echo; echo'

# root privile                                                                                                                                                                                                                   ges
alias doas="doas --"

# navi                                                                                                                                                                                                                           gation
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# vim and emacs
alias vim='nvim'
alias em='/usr/bin/emacs -nw'
alias emacs="emacsclient -c -a 'emacs'"
alias doomsync="~/.emacs.d/bin/doom sync"
alias doomdoctor="~/.emacs.d/bin/doom doctor"
alias doomup                                                                                                                                                                                                                     grade="~/.emacs.d/bin/doom up                                                                                        grade"
alias doompur                                                                                                                                                                                                                    ge="~/.emacs.d/bin/doom pur                                                                                          ge"

# Chan                                                                                                                                                                                                                           gin                                                                                                                  g "ls" to "exa"
alias l='exa -al --color=always --                                                                                                                                                                                               group-directories-first' # my preferred listin                                                                       g
alias la='exa -a --color=always --                                                                                                                                                                                               group-directories-first'  # all files and dirs
alias ll='exa -l --color=always --                                                                                                                                                                                               group-directories-first'  # lon                                                                                      g format
alias lt='exa -aT --color=always --                                                                                                                                                                                              group-directories-first' # tree listin                                                                               g
alias l.='exa -a | e                                                                                                                                                                                                             grep "^\."'

# pacman and yay
alias pacsyu='sudo pacman -Syyu'                 # update only standard pk                                                                                                                                                       gs
alias yaysua='yay -Sua --noconfirm'              # update only AUR pk                                                                                                                                                            gs (yay)
alias yaysyu='yay -Syu --noconfirm'              # update standard pk                                                                                                                                                            gs and AUR pk                                                                                                        gs (yay)
alias parsua='paru -Sua --noconfirm'             # update only AUR pk                                                                                                                                                            gs (paru)
alias parsyu='paru -Syu --noconfirm'             # update standard pk                                                                                                                                                            gs and AUR pk                                                                                                        gs (paru)
alias unlock='sudo rm /var/lib/pacman/db.lck'    # remove pacman lock
alias cleanup='sudo pacman -Rns (pacman -Qtdq)'  # remove orphaned packa                                                                                                                                                         ges

#                                                                                                                                                                                                                                get fastest mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort a                                                                                                                                                                   ge --save /etc/pacman.d/mirrorlist"

# Colorize                                                                                                                                                                                                                       grep output (                                                                                                        good for lo                                                                                                   g files)
alias                                                                                                                                                                                                                            grep='                                                                                                               grep --color=auto'
alias e                                                                                                                                                                                                                          grep='e                                                                                                              grep --color=auto'
alias f                                                                                                                                                                                                                          grep='f                                                                                                              grep --color=auto'

# confirm before overwritin                                                                                                                                                                                                      g somethin                                                                                                           g
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

# addin                                                                                                                                                                                                                          g fla                                                                                                                gs
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias lynx='lynx -cf                                                                                                                                                                                                             g=~/.lynx/lynx.cf                                                                                                    g -lss=~/.lynx/lynx.lss -vikeys'
alias vifm='./.confi                                                                                                                                                                                                             g/vifm/scripts/vifmrun'
alias ncmpcpp='ncmpcpp ncmpcpp_directory=$HOME/.confi                                                                                                                                                                            g/ncmpcpp/'
alias mocp='mocp -M "$XD                                                                                                                                                                                                         G_CONFI                                                                                                              G_HOME"/moc -O MOCDir="$XD                                                                                    G_CONFI                                                                                                                                                                                           G_HOME"/moc'

# ps
alias psa="ps auxf"
alias ps                                                                                                                                                                                                                         grep="ps aux |                                                                                                       grep -v                                                                                                       grep |                                                                                                                                                                                            grep -i -e VSZ -e"
alias psmem='ps auxf | sort -nr -k 4'
alias pscpu='ps auxf | sort -nr -k 3'

# Mer                                                                                                                                                                                                                            ge Xresources
alias mer                                                                                                                                                                                                                        ge='xrdb -mer                                                                                                        ge ~/.Xresources'

#                                                                                                                                                                                                                                git
alias addup='                                                                                                                                                                                                                    git add -u'
alias addall='                                                                                                                                                                                                                   git add .'
alias branch='                                                                                                                                                                                                                   git branch'
alias checkout='                                                                                                                                                                                                                 git checkout'
alias clone='                                                                                                                                                                                                                    git clone'
alias commit='                                                                                                                                                                                                                   git commit -m'
alias fetch='                                                                                                                                                                                                                    git fetch'
alias pull='                                                                                                                                                                                                                     git pull ori                                                                                                         gin'
alias push='                                                                                                                                                                                                                     git push ori                                                                                                         gin'
alias ta                                                                                                                                                                                                                         g='                                                                                                                  git ta                                                                                                        g'
alias newta                                                                                                                                                                                                                      g='                                                                                                                  git ta                                                                                                        g -a'

#                                                                                                                                                                                                                                get error messa                                                                                                      ges from journalctl
alias jctl="journalctl -p 3 -xb"

#                                                                                                                                                                                                                                gp                                                                                                                   g encryption
# verify si                                                                                                                                                                                                                      gnature for isos
alias                                                                                                                                                                                                                            gp                                                                                                                   g-check="                                                                                                     gp                                                                                                                                                                                                g2 --keyserver-options auto-key-retrieve --verify"
# receive the key of a developer
alias                                                                                                                                                                                                                            gp                                                                                                                   g-retrieve="                                                                                                  gp                                                                                                                                                                                                g2 --keyserver-options auto-key-retrieve --receive-keys"

# youtube-dl
alias yta-aac="youtube-dl --extract-audio --audio-format aac "
alias yta-best="youtube-dl --extract-audio --audio-format best "
alias yta-flac="youtube-dl --extract-audio --audio-format flac "
alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
alias yta-opus="youtube-dl --extract-audio --audio-format opus "
alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
alias yta-wav="youtube-dl --extract-audio --audio-format wav "
alias ytv-best="youtube-dl -f bestvideo+bestaudio "

# switch between shells
# I do not recommend switchin                                                                                                                                                                                                    g default SHELL from bash.
alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now lo                                                                                                                                                                       g out.'"
alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now lo                                                                                                                                                                         g out.'"
alias tofish="sudo chsh $USER -s /bin/fish && echo 'Now lo                                                                                                                                                                       g out.'"

# bare                                                                                                                                                                                                                           git repo alias for dotfiles
alias confi                                                                                                                                                                                                                      g="/usr/bin/                                                                                                         git --                                                                                                        git-dir=$HOME/dotfiles --work-tree=$HOME"

# termbin
alias tb="nc termbin.com 9999"

# the terminal rickroll
alias rr='curl -s -L https://raw.                                                                                                                                                                                                githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'

# Unlock LBRY tips
alias tips="lbrynet txo spend --type=support --is_not_my_input --blockin                                                                                                                                                         g"

### DTOS ###
# Copy/paste all content of /etc/dtos over to home folder. A backup of confi                                                                                                                                                     g is created. (Be careful runnin                                                                                     g this!)
alias dtoscopy='[ -d ~/.confi                                                                                                                                                                                                    g ] || mkdir ~/.confi                                                                                                g && cp -Rf ~/.confi                                                                                          g ~/.confi                                                                                                                                                                                        g-backup-(date +%Y.%m.%d-%H.%M.%S) && cp -rf /etc/dtos/* ~'
# Backup contents of /etc/dtos to a backup folder in $HOME.
alias dtosbackup='cp -Rf /etc/dtos ~/dtos-backup-(date +%Y.%m.%d-%H.%M.%S)'

### RANDOM COLOR SCRIPT ###
#                                                                                                                                                                                                                                Get this script from my                                                                                              GitLab:                                                                                                       gitlab.com/dwt1/shell-color-scripts
# Or install it from the Arch User Repository: shell-color-scripts
colorscript random

### SETTIN                                                                                                                                                                                                                       G THE STARSHIP PROMPT ###
starship init fish | source

#+END_SRC
* Doom emacs
** BEACON ADDON
Never loose your cursor
#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(beacon-mode 1)
#+END_SRC
** BOOKMARKS AND BUFFERS
Doom Emacs uses 'SPC b' for keybindin                                                                                                                                                                                            gs related to bookmarks and buffers.
*** Bookmarks
Bookmarks are somewhat like re                                                                                                                                                                                                   gisters in that they record positions you can jump to.  Unlike re                                                    gisters, they have lon                                                                                        g names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were readin                                                  g in various files.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks" "L" #'list-bookmarks
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+END_SRC

*** Buffers
Re                                                                                                                                                                                                                               gardin                                                                                                               g /buffers/, the text you are editin                                                                          g in Emacs resides in an object called a /buffer/. Each time you visit a file, a buffer is used to hold the file’s text. Each time you invoke Dired, a buffer is used to hold the directory listing.  /Ibuffer/ is a pro                                                                                                                                                                       gram that lists all of your Emacs /buffers/, allowin                        g you to navi                                                                                        gate between them and filter them.

| COMMAND         | DESCRIPTION          | KEYBINDIN                                                                                                                                                                             G |
|-----------------+----------------------+------------|
| ibuffer         | Launch ibuffer       | SPC b i    |
| kill-buffer     | Kill current buffer  | SPC b k    |
| next-buffer     |                                                                                                                                                                                                              Goto next buffer     | SPC b n    |
| previous-buffer |                                                                                                                                                                                                              Goto previous buffer | SPC b p    |
| save-buffer     | Save current buffer  | SPC b s    |

*** Keybindin                                                                                                                                                                                                                    gs within ibuffer mode
| COMMAND                           | DESCRIPTION                            | KEYBINDIN                                                                                                                                         G |
|-----------------------------------+----------------------------------------+------------|
| ibuffer-mark-forward              | Mark the buffer                        | m          |
| ibuffer-unmark-forward            | Unmark the buffer                      | u          |
| ibuffer-do-kill-on-deletion-marks | Kill the marked buffers                | x          |
| ibuffer-filter-by-content         | Ibuffer filter by content              | f c        |
| ibuffer-filter-by-directory       | Ibuffer filter by directory            | f d        |
| ibuffer-filter-by-filename        | Ibuffer filter by filename (full path) | f f        |
| ibuffer-filter-by-mode            | Ibuffer filter by mode                 | f m        |
| ibuffer-filter-by-name            | Ibuffer filter by name                 | f n        |
| ibuffer-filter-disable            | Disable ibuffer filter                 | f x        |
| ibuffer-do-kill-lines             | Hide marked buffers                    |                                                                                                                                                   g h        |
| ibuffer-update                    | Restore hidden buffers                 |                                                                                                                                                   g H        |

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(evil-define-key 'normal ibuffer-mode-map
  (kbd "f c") 'ibuffer-filter-by-content
  (kbd "f d") 'ibuffer-filter-by-directory
  (kbd "f f") 'ibuffer-filter-by-filename
  (kbd "f m") 'ibuffer-filter-by-mode
  (kbd "f n") 'ibuffer-filter-by-name
  (kbd "f x") 'ibuffer-filter-disable
  (kbd "                                                                                                                                                                                                                         g h") 'ibuffer-do-kill-lines
  (kbd "                                                                                                                                                                                                                         g H") 'ibuffer-update)
#+end_src
** CALENDAR
Let's make a 12-month calendar available so we can have a calendar app that, when we click on time/date in xmobar, we                                                                                                            get a nice 12-month calendar to view.

This is a modification of: http://homepa                                                                                                                                                                                         ge3.nifty.com/oatu/emacs/calendar.html
See also: https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
;; https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months
(defun dt/year-calendar (&optional year)
  (interactive)
  (require 'calendar)
  (let* (
      (current-year (number-to-strin                                                                                                                                                                                             g (nth 5 (decode-time (current-time)))))
      (month 0)
      (year (if year year (strin                                                                                                                                                                                                 g-to-number (format-time-strin                                                                                       g "%Y" (current-time))))))
    (switch-to-buffer (                                                                                                                                                                                                          get-buffer-create calendar-buffer))
    (when (not (eq major-mode 'calendar-mode))
      (calendar-mode))
    (setq displayed-month month)
    (setq displayed-year year)
    (setq buffer-read-only nil)
    (erase-buffer)
    ;; horizontal rows
    (dotimes (j 4)
      ;; vertical columns
      (dotimes (i 3)
        (calendar-                                                                                                                                                                                                               generate-month
          (setq month (+ month 1))
          year
          ;; indentation / spacin                                                                                                                                                                                                g between months
          (+ 5 (* 25 i))))
      (                                                                                                                                                                                                                          goto-char (point-max))
      (insert (make-strin                                                                                                                                                                                                        g (- 10 (count-lines (point-min) (point-max))) ?\n))
      (widen)
      (                                                                                                                                                                                                                          goto-char (point-max))
      (narrow-to-re                                                                                                                                                                                                              gion (point-max) (point-max)))
    (widen)
    (                                                                                                                                                                                                                            goto-char (point-min))
    (setq buffer-read-only t)))

(defun dt/scroll-year-calendar-forward (&optional ar                                                                                                                                                                             g event)
  "Scroll the yearly calendar by year in a forward direction."
  (interactive (list (prefix-numeric-value current-prefix-ar                                                                                                                                                                     g)
                     last-nonmenu-event))
  (unless ar                                                                                                                                                                                                                     g (setq ar                                                                                                           g 0))
  (save-selected-window
    (if (setq event (event-start event)) (select-window (posn-window event)))
    (unless (zerop ar                                                                                                                                                                                                            g)
      (let* (
              (year (+ displayed-year ar                                                                                                                                                                                         g)))
        (dt/year-calendar year)))
    (                                                                                                                                                                                                                            goto-char (point-min))
    (run-hooks 'calendar-move-hook)))

(defun dt/scroll-year-calendar-backward (&optional ar                                                                                                                                                                            g event)
  "Scroll the yearly calendar by year in a backward direction."
  (interactive (list (prefix-numeric-value current-prefix-ar                                                                                                                                                                     g)
                     last-nonmenu-event))
  (dt/scroll-year-calendar-forward (- (or ar                                                                                                                                                                                     g 1)) event))

(map! :leader
      :desc "Scroll year calendar backward" "<left>" #'dt/scroll-year-calendar-backward
      :desc "Scroll year calendar forward" "<ri                                                                                                                                                                                  ght>" #'dt/scroll-year-calendar-forward)

(defalias 'year-calendar 'dt/year-calendar)
#+end_src

Let's also play around with calfw.
#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(use-packa                                                                                                                                                                                                                       ge! calfw)
(use-packa                                                                                                                                                                                                                       ge! calfw-or                                                                                                         g)
#+end_src

** CENTAUR-TABS
To use tabs in Doom Emacs, be sure to uncomment "tabs" in Doom's init.el.  Displays tabs at the top of the window similar to tabbed web browsers such as Firefox.  I don't actually use tabs in Emacs.  I placed this in my config to help others who may want tabs.  In the default confi                                                            guration of Doom Emacs, 'SPC t' is used for "to                                                               g                                                                                                                                                                                                 gle" keybindin                                                                                                                                                                               gs, so I choose 'SPC t c' to to                                             g                                                                                                    gle centaur-tabs.  The "                                                                                                    g" prefix for keybindin                                                                                                             gs is used for a bunch of evil keybindings in Doom, but "                  g" plus the arrow keys were not used, so I thought I would bind those for tab navigation.  But I did leave the default "g t" and "g T" intact if you prefer to use those for centaur-tabs-forward/backward.

| COMMAND                     | DESCRIPTION               | KEYBINDIN                                                                                                                                                            G       |
|-----------------------------+---------------------------+------------------|
| centaur-tabs-mode           | /To                                                                                                                                                                                              g                                                                                                                    gle tabs                                                                                                      globally/      | SPC t c          |
| centaur-tabs-local-mode     | /To                                                                                                                                                                                              g                                                                                                                    gle tabs local display/ | SPC t C          |
| centaur-tabs-forward        | /Next tab/                  |                                                                                                                                                                    g <ri                                                                                                                ght> or                                                                                                       g t |
| centaur-tabs-backward       | /Previous tab/              |                                                                                                                                                                    g <left> or                                                                                                          g T  |
| centaur-tabs-forward-                                                                                                                                                                                                          group  | /Next tab                                                                                                   group/            |                                                                                           g <down>         |
| centaur-tabs-backward-                                                                                                                                                                                                         group | /Previous tab                                                                                                group/        |                                                                                               g <up>           |

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-                                                                                                                                                                                                              gray-out-icons 'buffer
      centaur-tabs-hei                                                                                                                                                                                                           ght 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "To                                                                                                                                                                                                                  g                                                                                                                    gle tabs                                                                                                      globally" "t c" #'centaur-tabs-mode
      :desc "To                                                                                                                                                                                                                  g                                                                                                                    gle tabs local display" "t C" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "                                                                                                                                                                            g <ri                                                                                                                ght>") 'centaur-tabs-forward        ; default Doom bindin                                                     g is '                                                                                                                                                                                            g t'
                                               (kbd "                                                                                                                                                                            g <left>")  'centaur-tabs-backward       ; default Doom bindin                                                       g is '                                                                                                        g T'
                                               (kbd "                                                                                                                                                                            g <down>")  'centaur-tabs-forward-                                                                                   group
                                               (kbd "                                                                                                                                                                            g <up>")    'centaur-tabs-backward-                                                                                  group)
#+END_SRC

** DASHBOARD
Emacs Dashboard is an extensible startup screen showin                                                                                                                                                                           g you recent files, bookmarks, a                                                                                     genda items and an Emacs banner.

*** Confi                                                                                                                                                                                                                        gurin                                                                                                                g Dashboard
#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(use-packa                                                                                                                                                                                                                       ge dashboard
  :init      ;; tweak dashboard confi                                                                                                                                                                                            g before loadin                                                                                                      g it
  (setq dashboard-set-headin                                                                                                                                                                                                     g-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-lo                                                                                                                                                                                                      go-title "\nKEYBINDIN                                                                                                GS:\
\nFind file               (SPC .)     \
Open buffer list    (SPC b i)\
\nFind recent files       (SPC f r)   \
Open the eshell     (SPC e s)\
\nOpen dired file mana                                                                                                                                                                                                           ger (SPC d d)   \
List of keybindin                                                                                                                                                                                                                gs (SPC h b b)")
  ;;(setq dashboard-startup-banner 'lo                                                                                                                                                                                           go) ;; use standard emacs lo                                                                                         go as banner
  (setq dashboard-startup-banner "~/.confi                                                                                                                                                                                       g/doom/doom-emacs-dash.pn                                                                                            g")  ;; use custom ima                                                                                        ge as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (a                                                                                                                                                                                                     genda . 5 )
                          (bookmarks . 5)
                          (projects . 5)
                          (re                                                                                                                                                                                                    gisters . 5)))
  :confi                                                                                                                                                                                                                         g
  (dashboard-setup-startup-hook)
  (dashboard-modify-headin                                                                                                                                                                                                       g-icons '((recents . "file-text")
                                    (bookmarks . "book"))))
#+end_src

*** Dashboard in Emacsclient
This settin                                                                                                                                                                                                                      g ensures that emacsclient always opens on *dashboard* rather than *scratch*.
#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq doom-fallback-buffer "*dashboard*")
#+end_src

** DIRED
Dired is the file mana                                                                                                                                                                                                           ger within Emacs.  Below, I setup keybindin                                                                          gs for ima                                                                                                    ge previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindin                                                                                                               gs, so I've chosen the format of 'SPC d' plus 'key'.

*** Keybindin                                                                                                                                                                                                                    gs To Open Dired

| COMMAND    | DESCRIPTION                        | KEYBINDIN                                                                                                                                                                    G |
|------------+------------------------------------+------------|
| dired      | /Open dired file mana                                                                                                                                                                                             ger/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

*** Keybindin                                                                                                                                                                                                                    gs Within Dired
**** Basic dired commands

| COMMAND                 | DESCRIPTION                                 | KEYBINDIN                                                                                                                                              G |
|-------------------------+---------------------------------------------+------------|
| dired-view-file         | /View file in dired/                          | SPC d v    |
| dired-up-directory      | /                                                                                                                                                                                                    Go up in directory tree/                     | h          |
| dired-find-file         | /                                                                                                                                                                                                    Go down in directory tree (or open if file)/ | l          |
| dired-next-line         | Move down to next line                      | j          |
| dired-previous-line     | Move up to previous line                    | k          |
| dired-mark              | Mark file at point                          | m          |
| dired-unmark            | Unmark file at point                        | u          |
| dired-do-copy           | Copy current file or marked files           | C          |
| dired-do-rename         | Rename current file or marked files         | R          |
| dired-hide-details      | To                                                                                                                                                                                                   g                                                                                                                    gle detailed listin                                                                                           gs on/off             | (          |
| dired-                                                                                                                                                                                                                         git-info-mode     | To                                                                                               g                                                                                                             gle                                                                                                                                                                                               git information on/off               | )          |
| dired-create-directory  | Create new empty directory                  | +          |
| dired-diff              | Compare file at point with another          | =          |
| dired-subtree-to                                                                                                                                                                                                               g                                                                                                                    gle    | To                                                                                                   g                                                                                                                                                                                                 gle viewin                                                                                                                                                                                   g subtree at point             | TAB        |

**** Dired commands usin                                                                                                                                                                                                         g re                                                                                                                 gex

| COMMAND                 | DESCRIPTION                | KEYBINDIN                                                                                                                                                               G |
|-------------------------+----------------------------+------------|
| dired-mark-files-re                                                                                                                                                                                                            gexp | Mark files usin                                                                                               g re                                                                                                          gex     | % m        |
| dired-do-copy-re                                                                                                                                                                                                               gexp    | Copy files usin                                                                                            g re                                                                                                          gex     | % C        |
| dired-do-rename-re                                                                                                                                                                                                             gexp  | Rename files usin                                                                                            g re                                                                                                          gex   | % R        |
| dired-mark-files-re                                                                                                                                                                                                            gexp | Mark all files usin                                                                                           g re                                                                                                          gex | * %        |

**** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDIN                                                                                                                                                                 G |
|-----------------+----------------------------------+------------|
| dired-do-ch                                                                                                                                                                                                                    grp  | Chan                                                                                                          ge the                                                                                                        group of marked files |                                                                                                                                                                           g                                                                                                                                                                                            G        |
| dired-do-chmod  | Chan                                                                                                                                                                                                         ge the mode of marked files  | M          |
| dired-do-chown  | Chan                                                                                                                                                                                                         ge the owner of marked files | O          |
| dired-do-rename | Rename file or all marked files  | R          |

#+be                                                                                                                                                                                                                             gin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired ima                                                                                                                                                                                                    ge previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-to                                                                                                                                                                                                            g                                                                                                                    gle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-                                                                                                                                                                                                              goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill rin                                                                                                                                              g.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;;                                                                                                                                                                                                                               Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plu                                                                                                                                                                                                           gin, you can launch external pro                                                                                     grams for certain extensions
;; For example, I set all .pn                                                                                                                                                                                                    g files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("                                                                                                                                                                                                 gif" . "sxiv")
                              ("jp                                                                                                                                                                                               g" . "sxiv")
                              ("pn                                                                                                                                                                                               g" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

*** Keybindin                                                                                                                                                                                                                    gs Within Dired With Peep-Dired-Mode Enabled
If peep-dired is enabled, you will                                                                                                                                                                                               get ima                                                                                                              ge previews as you                                                                                            go up/down with 'j' and 'k'

| COMMAND              | DESCRIPTION                              | KEYBINDIN                                                                                                                                                    G |
|----------------------+------------------------------------------+------------|
| peep-dired           | /To                                                                                                                                                                                                     g                                                                                                                    gle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC

*** Makin                                                                                                                                                                                                                        g deleted files                                                                                                      go to trash can
#+be                                                                                                                                                                                                                             gin_src emacs-lisp
(setq delete-by-movin                                                                                                                                                                                                            g-to-trash t
      trash-directory "~/.local/share/Trash/files/")
#+end_src

** DOOM THEME
Settin                                                                                                                                                                                                                           g the theme to doom-one.  To try out new themes, I set a keybindin                                                   g for counsel-load-theme with 'SPC h t'.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq doom-theme 'doom-one)
(map! :leader
      :desc "Load new theme" "h t" #'counsel-load-theme)
#+END_SRC

** ELFEED
An RSS newsfeed reader for Emacs.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(use-packa                                                                                                                                                                                                                       ge! elfeed-                                                                                                          goodies)
(elfeed-                                                                                                                                                                                                                         goodies/setup)
(setq elfeed-                                                                                                                                                                                                                    goodies/entry-pane-size 0.5)
(add-hook 'elfeed-show-mode-hook 'visual-line-mode)
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-                                                                                                                                                                                                             goodies/split-show-next
  (kbd "K") 'elfeed-                                                                                                                                                                                                             goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-                                                                                                                                                                                                             goodies/split-show-next
  (kbd "K") 'elfeed-                                                                                                                                                                                                             goodies/split-show-prev)
(setq elfeed-feeds (quote
                    (("https://www.reddit.com/r/linux.rss" reddit linux)
                     ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                     ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
                     ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                     ("https://www.                                                                                                                                                                                              gamin                                                                                                                gonlinux.com/article_rss.php"                                                                                 gamin                                                                                                                                                                                             g linux)
                     ("https://hackaday.com/blo                                                                                                                                                                                  g/feed/" hackaday linux)
                     ("https://opensource.com/feed" opensource linux)
                     ("https://linux.softpedia.com/backend.xml" softpedia linux)
                     ("https://itsfoss.com/feed/" itsfoss linux)
                     ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                     ("https://www.phoronix.com/rss.php" phoronix linux)
                     ("http://feeds.feedburner.com/d0od" om                                                                                                                                                                      gubuntu linux)
                     ("https://www.computerworld.com/index.rss" computerworld linux)
                     ("https://www.networkworld.com/cate                                                                                                                                                                         gory/linux/index.rss" networkworld linux)
                     ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                     ("https://betanews.com/feed" betanews linux)
                     ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                     ("https://distrowatch.com/news/dwd.xml" distrowatch linux))))
#+END_SRC

** EMMS
One of the media players available for Emacs is emms, which stands for Emacs Multimedia System.  By default, Doom Emacs does not use 'SPC a',' so the format I use for these bindin                                              gs is 'SPC a' plus 'key'.

| COMMAND               | DESCRIPTION                       | KEYBINDIN                                                                                                                                                          G |
|-----------------------+-----------------------------------+------------|
| emms-playlist-mode-                                                                                                                                                                                                            go | /Switch to the playlist buffer/     | SPC a a    |
| emms-pause            | /Pause the track/                   | SPC a x    |
| emms-stop             | /Stop the track/                    | SPC a s    |
| emms-previous         | /Play previous track in playlist/   | SPC a p    |
| emms-next             | /Play next track in playlist/       | SPC a n    |

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(emms-all)
(emms-default-players)
(emms-mode-line 1)
(emms-playin                                                                                                                                                                                                                     g-time 1)
(setq emms-source-file-default-directory "~/Music/"
      emms-playlist-buffer-name "*Music*"
      emms-info-asynchronously t
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
(map! :leader
      (:prefix ("a" . "EMMS audio player")
       :desc "                                                                                                                                                                                                                   Go to emms playlist" "a" #'emms-playlist-mode-                                                                       go
       :desc "Emms pause track" "x" #'emms-pause
       :desc "Emms stop track" "s" #'emms-stop
       :desc "Emms play previous track" "p" #'emms-previous
       :desc "Emms play next track" "n" #'emms-next))
#+END_SRC

** EMOJIS
Emojify is an Emacs extension to display emojis. It can display                                                                                                                                                                  github style emojis like :smile: or plain ascii ones like :).

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(use-packa                                                                                                                                                                                                                       ge emojify
  :hook (after-init .                                                                                                                                                                                                            global-emojify-mode))
#+end_src

** EVALUATE ELISP EXPRESSIONS
Chan                                                                                                                                                                                                                             gin                                                                                                                  g some keybindin                                                                                              gs from their defaults to better fit with Doom Emacs, and to avoid conflicts with my window mana                                                                                                  gers which sometimes use the control key in their keybindin                                                                                                                                  gs.  By default, Doom Emacs does not use 'SPC e' for anythin                g, so I choose to use the format 'SPC e' plus 'key' for these (I also use 'SPC e' for 'eww' keybindings).

| COMMAND         | DESCRIPTION                                    | KEYBINDIN                                                                                                                                                   G |
|-----------------+------------------------------------------------+------------|
| eval-buffer     | /Evaluate elisp in buffer/                       | SPC e b    |
| eval-defun      | /Evaluate the defun containin                                                                                                                                                                                g or after point/   | SPC e d    |
| eval-expression | /Evaluate an elisp expression/                   | SPC e e    |
| eval-last-sexp  | /Evaluate elisp expression before point/         | SPC e l    |
| eval-re                                                                                                                                                                                                                        gion     | /Evaluate elisp in re                                                                                     gion/                       | SPC e r    |

#+Be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(map! :leader
      (:prefix ("e". "evaluate/EWW")
       :desc "Evaluate elisp in buffer" "b" #'eval-buffer
       :desc "Evaluate defun" "d" #'eval-defun
       :desc "Evaluate elisp expression" "e" #'eval-expression
       :desc "Evaluate last sexpression" "l" #'eval-last-sexp
       :desc "Evaluate elisp in re                                                                                                                                                                                               gion" "r" #'eval-re                                                                                                  gion))
#+END_SRC

** EWW
EWW is the Emacs Web Wowser, the builtin browser in Emacs.  Below I set urls to open in a specific browser (eww) with browse-url-browser-function.  By default, Doom Emacs does not use 'SPC e' for anythin                      g, so I choose to use the format 'SPC e' plus 'key' for these (I also use 'SPC e' for 'eval' keybindin               gs).  I chose to use 'SPC s w' for eww-search-words because Doom Emacs uses 'SPC s' for 'search' commands.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq browse-url-browser-function 'eww-browse-url)
(map! :leader
      :desc "Search web for text between BE                                                                                                                                                                                      G/END"
      "s w" #'eww-search-words
      (:prefix ("e" . "evaluate/EWW")
       :desc "Eww web browser" "w" #'eww
       :desc "Eww reload pa                                                                                                                                                                                                      ge" "R" #'eww-reload))
#+END_SRC

** FONTS
Settin                                                                                                                                                                                                                           gs related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most thin                                                                                                                                                              gs in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plu                                                                                                                                                  gins.
+ 'doom-bi                                                                                                                                                                                                                       g-font' -- used in doom-bi                                                                                           g-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special si                                                                                                                                                                       gnificance like 'setq' in elisp.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq doom-font (font-spec :family "Source Code Pro" :size 15)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-bi                                                                                                                                                                                                                    g-font (font-spec :family "Source Code Pro" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

** INSERT DATE
Some custom functions to insert the date.  The function 'insert-todays-date' can be used one of three different ways: (1) just the keybindin                                                                                     g without the universal ar                                                                                           gument prefix, (2) with one universal ar                                                                      gument prefix, or (3) with two universal ar                                                                                                                                                       gument prefixes.  The universal ar                                                                                                                                                           gument prefix is 'SPC-u' in Doom Emacs (C-u in standard                     GNU Emacs).  The function 'insert-any-date' only outputs to one format, which is the same format as 'insert-todays-date' without a prefix.

| COMMAND               | EXAMPLE OUTPUT            | KEYBINDIN                                                                                                                                                                  G            |
|-----------------------+---------------------------+-----------------------|
| dt/insert-todays-date | Friday, November 19, 2021 | SPC i d t             |
| dt/insert-todays-date | 11-19-2021                | SPC u SPC i d t       |
| dt/insert-todays-date | 2021-11-19                | SPC u SPC u SPC i d t |
| dt/insert-any-date    | Friday, November 19, 2021 | SPC i d a             |

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(defun dt/insert-todays-date (prefix)
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%A, %B %d, %Y")
                 ((equal prefix '(4)) "%m-%d-%Y")
                 ((equal prefix '(16)) "%Y-%m-%d"))))
    (insert (format-time-strin                                                                                                                                                                                                   g format))))

(require 'calendar)
(defun dt/insert-any-date (date)
  "Insert DATE usin                                                                                                                                                                                                              g the current locale."
  (interactive (list (calendar-read-date)))
  (insert (calendar-date-strin                                                                                                                                                                                                   g date)))

(map! :leader
      (:prefix ("i d" . "Insert date")
        :desc "Insert any date" "a" #'dt/insert-any-date
        :desc "Insert todays date" "t" #'dt/insert-todays-date))
#+end_src
** IVY
Ivy is a                                                                                                                                                                                                                         generic completion mechanism for Emacs.

*** IVY-POSFRAME
Ivy-posframe is an ivy extension, which lets ivy use posframe to show its candidate menu.  Some of the settin                                                                                                                    gs below involve:
+ ivy-posframe-display-functions-alist -- sets the display position for specific pro                                                                                                                                             grams
+ ivy-posframe-hei                                                                                                                                                                                                               ght-alist -- sets the hei                                                                                            ght of the list displayed for specific pro                                                                    grams

Available functions (positions) for 'ivy-posframe-display-functions-alist'
+ ivy-posframe-display-at-frame-center
+ ivy-posframe-display-at-window-center
+ ivy-posframe-display-at-frame-bottom-left
+ ivy-posframe-display-at-window-bottom-left
+ ivy-posframe-display-at-frame-bottom-window-center
+ ivy-posframe-display-at-point
+ ivy-posframe-display-at-frame-top-center

=NOTE:= If the settin                                                                                                                                                                                                            g for 'ivy-posframe-display' is set to 'nil' (false), anythin                                                        g that is set to 'ivy-display-function-fallback' will just default to their normal position in Doom Emacs (usually a bottom split).  However, if this is set to 't' (true), then the fallback position will be centered in the window.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-re                                                                                                                                                                                                              gister           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-hei                                                                                                                                                                                                           ght-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.
#+END_SRC

*** IVY KEYBINDIN                                                                                                                                                                                                                GS
By default, Doom Emacs does not use 'SPC v', so the format I use for these bindin                                                                                                                                                gs is 'SPC v' plus 'key'.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(map! :leader
      (:prefix ("v" . "Ivy")
       :desc "Ivy push view" "v p" #'ivy-push-view
       :desc "Ivy switch view" "v s" #'ivy-switch-view))
#+END_SRC

** LINE SETTIN                                                                                                                                                                                                                   GS
I set comment-line to 'SPC TAB TAB' which is a rather comfortable keybindin                                                                                                                                                      g for me on my ZSA Moonlander keyboard.  The standard Emacs keybindin                                                g for comment-line is 'C-x C-;'.  The other keybindin                                                         gs are for commands that to                                                                                                                                                                       g                                                                                                                                                                                            gle on/off various line-related settin                                      gs.  Doom Emacs uses 'SPC t' for "to                                                                 g                                                                                                                           gle" commands, so I choose 'SPC t' plus 'key' for those bindin                                                                      gs.

| COMMAND                  | DESCRIPTION                               | KEYBINDIN                                                                                                                                               G  |
|--------------------------+-------------------------------------------+-------------|
| comment-line             | /Comment or uncomment lines/                | SPC TAB TAB |
| hl-line-mode             | /To                                                                                                                                                                                                 g                                                                                                                    gle line hi                                                                                                   ghli                                                                                                                                                                                              ghtin                                                                                                                                                                                        g in current frame/ | SPC t h     |
|                                                                                                                                                                                                                                global-hl-line-mode      | /To                                                                                       g                                                                                                             gle line hi                                                                                                                                                                                       ghli                                                                                                                                                                                         ghtin                                                                       g                                                                                                    globally/         | SPC t H     |
| doom/to                                                                                                                                                                                                                        g                                                                                                                    gle-line-numbers | /To                                                                                        g                                                                                                                                                                                                 gle line numbers/                       | SPC t l     |
| to                                                                                                                                                                                                                             g                                                                                                                    gle-truncate-lines    | /To                                                                                   g                                                                                                                                                                                                 gle truncate lines/                     | SPC t t     |

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "to                                                                                                                                                                                                        g                                                                                                                    gle")
       :desc "To                                                                                                                                                                                                                 g                                                                                                                    gle line numbers" "l" #'doom/to                                                                               g                                                                                                                                                                                                 gle-line-numbers
       :desc "To                                                                                                                                                                                                                 g                                                                                                                    gle line hi                                                                                                   ghli                                                                                                                                                                                              ght in frame" "h" #'hl-line-mode
       :desc "To                                                                                                                                                                                                                 g                                                                                                                    gle line hi                                                                                                   ghli                                                                                                                                                                                              ght                                                                                                                                                                                          globally" "H" #'                                                            global-hl-line-mode
       :desc "To                                                                                                                                                                                                                 g                                                                                                                    gle truncate lines" "t" #'to                                                                                  g                                                                                                                                                                                                 gle-truncate-lines))
#+END_SRC

** MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to confi                                                                                                         gure in the Doom modeline, check out:
https://                                                                                                                                                                                                                         github.com/sea                                                                                                       gle0128/doom-modeline

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(set-face-attribute 'mode-line nil :font "Ubuntu Mono-13")
(setq doom-modeline-hei                                                                                                                                                                                                          ght 30     ;; sets modeline hei                                                                                      ght
      doom-modeline-bar-width 5   ;; sets ri                                                                                                                                                                                     ght bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t) ;; adds folder icon next to persp name
#+end_src

** MOUSE SUPPORT
Addin                                                                                                                                                                                                                            g mouse support in the terminal version of Emacs.

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(xterm-mouse-mode 1)
#+end_src

** NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size settin                                                                                  g makes the neotree width be adjustable.  Doom Emacs had no keybindin                                                gs set for neotree.  Since Doom Emacs uses 'SPC t' for 'to                                                    g                                                                                                                                                                                                 gle' keybindin                                                                                                                                                                               gs, I used 'SPC t n' for to                                                 g                                                                                                    gle-neotree.

| COMMAND        | DESCRIPTION               | KEYBINDIN                                                                                                                                                                         G |
|----------------+---------------------------+------------|
| neotree-to                                                                                                                                                                                                                     g                                                                                                                    gle | /To                                                                                                     g                                                                                                                                                                                                 gle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "To                                                                                                                                                                                                                  g                                                                                                                    gle neotree file viewer" "t n" #'neotree-to                                                                   g                                                                                                                                                                                                 gle
      :desc "Open directory in neotree" "d n" #'neotree-dir)
#+END_SRC

** OPEN SPECIFIC FILES
Keybindin                                                                                                                                                                                                                        gs to open files that I work with all the time usin                                                                  g the find-file command, which is the interactive file search that opens with 'C-x C-f' in                    GNU Emacs or 'SPC f f' in Doom Emacs.  These keybindin                                                                                                                                            gs use find-file non-interactively since we specify exactly what file to open.  The format I use for these bindin                                                                            gs is 'SPC =' plus 'key' since Doom Emacs does not use 'SPC ='.

| PATH TO FILE                   | DESCRIPTION           | KEYBINDIN                                                                                                                                                             G |
|--------------------------------+-----------------------+------------|
| ~/Or                                                                                                                                                                                                                           g/a                                                                                                                  genda.or                                                                                                      g               | /Edit a                                                                                                                                                                         genda file/      | SPC = a    |
| ~/.confi                                                                                                                                                                                                                       g/doom/confi                                                                                                         g.or                                                                                                          g"     | /Edit doom confi                                                                                                                                                                         g.or                                                                                                                                                                                         g/  | SPC = c    |
| ~/.confi                                                                                                                                                                                                                       g/doom/init.el"        | /Edit doom init.el/     | SPC = i    |
| ~/.confi                                                                                                                                                                                                                       g/doom/packa                                                                                                         ges.el"    | /Edit doom packa                                                                                 ges.el/ | SPC = p    |
| ~/.confi                                                                                                                                                                                                                       g/doom/eshell/aliases" | /Edit eshell aliases/   | SPC = e a  |
| ~/.confi                                                                                                                                                                                                                       g/doom/eshell/profile" | /Edit eshell profile/   | SPC = e p  |

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(map! :leader
      (:prefix ("=" . "open file")
       :desc "Edit a                                                                                                                                                                                                             genda file" "a" #'(lambda () (interactive) (find-file "~/Or                                                          g/a                                                                                                           genda.or                                                                                                                                                                                          g"))
       :desc "Edit doom confi                                                                                                                                                                                                    g.or                                                                                                                 g" "c" #'(lambda () (interactive) (find-file "~/.confi                                                        g/doom/confi                                                                                                                                                                                      g.or                                                                                                                                                                                         g"))
       :desc "Edit doom init.el" "i" #'(lambda () (interactive) (find-file "~/.confi                                                                                                                                             g/doom/init.el"))
       :desc "Edit doom packa                                                                                                                                                                                                    ges.el" "p" #'(lambda () (interactive) (find-file "~/.confi                                                          g/doom/packa                                                                                                  ges.el"))))
(map! :leader
      (:prefix ("= e" . "open eshell files")
       :desc "Edit eshell aliases" "a" #'(lambda () (interactive) (find-file "~/.confi                                                                                                                                           g/doom/eshell/aliases"))
       :desc "Edit eshell profile" "p" #'(lambda () (interactive) (find-file "~/.confi                                                                                                                                           g/doom/eshell/profile"))))
#+END_SRC

** OR                                                                                                                                                                                                                            G MODE
I wrapped most of this block in (after! or                                                                                                                                                                                       g).  Without this, my settin                                                                                         gs mi                                                                                                         ght be evaluated too early, which will result in my settin                                                                                                                                        gs bein                                                                                                                                                                                      g overwritten by Doom's defaults.  I have also enabled or                   g-journal, or                                                                                        g-superstar and or                                                                                                          g-roam by addin                                                                                                                     g (+journal +pretty +roam2) to the or   g section of my Doom Emacs init.el.

=NOTE:= I have the location of my Or                                                                                                                                                                                             g directory and Roam directory in $HOME/nc/ which is a Nextcloud folder that allows me to instantly sync all of my Org work between my home computer and my office computer.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(map! :leader
      :desc "Or                                                                                                                                                                                                                  g babel tan                                                                                                          gle" "m B" #'or                                                                                               g-babel-tan                                                                                                                                                                                       gle)
(after! or                                                                                                                                                                                                                       g
  (setq or                                                                                                                                                                                                                       g-directory "~/nc/Or                                                                                                 g/"
        or                                                                                                                                                                                                                       g-a                                                                                                                  genda-files '("~/nc/Or                                                                                        g/a                                                                                                                                                                                               genda.or                                                                                                                                                                                     g")
        or                                                                                                                                                                                                                       g-default-notes-file (expand-file-name "notes.or                                                                     g" or                                                                                                         g-directory)
        or                                                                                                                                                                                                                       g-ellipsis " ▼ "
        or                                                                                                                                                                                                                       g-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        or                                                                                                                                                                                                                       g-superstar-item-bullet-alist '((?+ . ?➤) (?- . ?✦)) ; chan                                                          ges +/- symbols in item lists
        or                                                                                                                                                                                                                       g-lo                                                                                                                 g-done 'time
        or                                                                                                                                                                                                                       g-hide-emphasis-markers t
        ;; ex. of or                                                                                                                                                                                                             g-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Pa                                                                                                                                                                                                ge][Description]]
        or                                                                                                                                                                                                                       g-link-abbrev-alist    ; This overwrites the default Doom or                                                         g-link-abbrev-list
          '(("                                                                                                                                                                                                                   goo                                                                                                                  gle" . "http://www.                                                                                           goo                                                                                                                                                                                               gle.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.or                                                                                                                                                                            g/index.php/")
            ("dd                                                                                                                                                                                                                 g" . "https://duckduck                                                                                               go.com/?q=")
            ("wiki" . "https://en.wikipedia.or                                                                                                                                                                                   g/wiki/"))
        or                                                                                                                                                                                                                       g-todo-keywords        ; This overwrites the default Doom or                                                         g-todo-keywords
          '((sequence
             "TODO"           ; A task that is ready to be tackled
             "WAIT"           ; Somethin                                                                                                                                                                                         g is holdin                                                                                                          g up this task
             "DONE"           ; Task has been completed
             "CANCELLED" )))) ; Task has been cancelled
#+END_SRC

*** Set font sizes for each header level in Or                                                                                                                                                                                   g
You can set the Or                                                                                                                                                                                                               g headin                                                                                                             g levels to be different font sizes.  So I choose to have level 1 headin                                      gs to be 140% in hei                                                                                                                                                                              ght, level 2 to be 130%, etc.  Other interestin                                                                                                                                              g thin                                                                      gs you could play with include addin                                                                 g :fore                                                                                                                     ground color and/or :back                                                                                                           ground color if you want to override the theme colors.
#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(custom-set-faces
  '(or                                                                                                                                                                                                                           g-level-1 ((t (:inherit outline-1 :hei                                                                               ght 1.4))))
  '(or                                                                                                                                                                                                                           g-level-2 ((t (:inherit outline-2 :hei                                                                               ght 1.3))))
  '(or                                                                                                                                                                                                                           g-level-3 ((t (:inherit outline-3 :hei                                                                               ght 1.2))))
  '(or                                                                                                                                                                                                                           g-level-4 ((t (:inherit outline-4 :hei                                                                               ght 1.1))))
  '(or                                                                                                                                                                                                                           g-level-5 ((t (:inherit outline-5 :hei                                                                               ght 1.0))))
)
#+end_src

*** Or                                                                                                                                                                                                                           g-export
We need ox-man for "Or                                                                                                                                                                                                           g eXportin                                                                                                           g" to manpa                                                                                                   ge format and ox-                                                                                                                                                                                 gemini for exportin                                                                                                                                                                          g to                                                                        gemtext (for the                                                                                     gemini protocol).

=NOTE:= I also enable ox-publish for convertin                                                                                                                                                                                   g an Or                                                                                                              g site into an HTML site, but that is done in init.el (or                                                     g +publish).

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(use-packa                                                                                                                                                                                                                       ge ox-man)
(use-packa                                                                                                                                                                                                                       ge ox-                                                                                                               gemini)
#+END_SRC

*** Or                                                                                                                                                                                                                           g-journal
#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq or                                                                                                                                                                                                                         g-journal-dir "~/nc/Or                                                                                               g/journal/"
      or                                                                                                                                                                                                                         g-journal-date-prefix "* "
      or                                                                                                                                                                                                                         g-journal-time-prefix "** "
      or                                                                                                                                                                                                                         g-journal-date-format "%B %d, %Y (%A) "
      or                                                                                                                                                                                                                         g-journal-file-format "%Y-%m-%d.or                                                                                   g")
#+end_src

*** Or                                                                                                                                                                                                                           g-publish
#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq or                                                                                                                                                                                                                         g-publish-use-timestamps-fla                                                                                         g nil)
(setq or                                                                                                                                                                                                                         g-export-with-broken-links t)
(setq or                                                                                                                                                                                                                         g-publish-project-alist
      '(("distro.tube"
         :base-directory "~/nc/                                                                                                                                                                                                  gitlab-repos/distro.tube/"
         :base-extension "or                                                                                                                                                                                                     g"
         :publishin                                                                                                                                                                                                              g-directory "~/nc/                                                                                                   gitlab-repos/distro.tube/html/"
         :recursive t
         :exclude "or                                                                                                                                                                                                            g-html-themes/.*"
         :publishin                                                                                                                                                                                                              g-function or                                                                                                        g-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("or                                                                                                                                                                                                                    g-static"
         :base-directory "~/Or                                                                                                                                                                                                   g/website"
         :base-extension "css\\|js\\|pn                                                                                                                                                                                          g\\|jp                                                                                                               g\\|                                                                                                          gif\\|pdf\\|mp3\\|o                                                                                                                                                                               g                                                                                                                                                                                            g\\|swf"
         :publishin                                                                                                                                                                                                              g-directory "~/public_html/"
         :recursive t
         :exclude ".*/or                                                                                                                                                                                                         g-html-themes/.*"
         :publishin                                                                                                                                                                                                              g-function or                                                                                                        g-publish-attachment)
      ))
#+end_src

*** Or                                                                                                                                                                                                                           g-roam
| COMMAND                         | DESCRIPTION                     | KEYBINDIN                                                                                                                                                  G  |
|---------------------------------+---------------------------------+-------------|
| or                                                                                                                                                                                                                             g-roam-find-file              | or                                                                                   g roam find file              | SPC n r f   |
| or                                                                                                                                                                                                                             g-roam-insert                 | or                                                                                   g roam insert                 | SPC n r i   |
| or                                                                                                                                                                                                                             g-roam-dailies-find-date      | or                                                                                   g roam dailies find date      | SPC n r d d |
| or                                                                                                                                                                                                                             g-roam-dailies-find-today     | or                                                                                   g roam dailies find today     | SPC n r d t |
| or                                                                                                                                                                                                                             g-roam-dailies-find-tomorrow  | or                                                                                   g roam dailies find tomorrow  | SPC n r d m |
| or                                                                                                                                                                                                                             g-roam-dailies-find-yesterday | or                                                                                   g roam dailies find yesterday | SPC n r d y |

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(after! or                                                                                                                                                                                                                       g-roam
  (setq or                                                                                                                                                                                                                       g-roam-directory "~/nc/Roam"))
#+end_src

** PASSWORD STORE
Uses the standard Unix password store "pass".

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(use-packa                                                                                                                                                                                                                       ge! password-store)
#+end_src

** PERSPECTIVE
Perspective provides multiple named workspaces (or "perspectives") in Emacs, similar to havin                                                                                                                                    g multiple desktops in window mana                                                                                   gers like Awesome and XMonad.  Each perspective has its own buffer list and its own window layout, makin      g it easy to work on many separate projects without                                                                                                                                               gettin                                                                                                                                                                                       g lost in all the buffers.  Switchin                                        g to a perspective activates its window confi                                                        guration, and when in a perspective, only its buffers are available (by default).  Doom Emacs uses 'SPC some_key' for binding some of the perspective commands, so I used this bin                                                                              gin                                     g format for the perspective bindings that I created..

| COMMAND                    | DESCRIPTION                         | KEYBINDIN                                                                                                                                                   G |
|----------------------------+-------------------------------------+------------|
| persp-switch               | Switch to perspective NAME          | SPC DEL    |
| persp-switch-to-buffer     | Switch to buffer in perspective     | SPC ,      |
| persp-next                 | Switch to next perspective          | SPC ]      |
| persp-prev                 | Switch to previous perspective      | SPC [      |
| persp-add-buffer           | Add a buffer to current perspective | SPC +      |
| persp-remove-by-name       | Remove perspective by name          | SPC -      |
| +workspace/switch-to-{0-9} | Switch to workspace /n/               | SPC 0-9    |

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(map! :leader
      :desc "Switch to perspective NAME" "DEL" #'persp-switch
      :desc "Switch to buffer in perspective" "," #'persp-switch-to-buffer
      :desc "Switch to next perspective" "]" #'persp-next
      :desc "Switch to previous perspective" "[" #'persp-prev
      :desc "Add a buffer current perspective" "+" #'persp-add-buffer
      :desc "Remove perspective by name" "-" #'persp-remove-by-name)
#+end_src

** RAINBOW MODE
Rainbox mode displays the actual color for any hex value color.  It's such a nice feature that I wanted it turned on all the time, re                                                                                            gardless of what mode I am in.  The followin                                                                         g creates a                                                                                                   global minor mode for rainbow-mode and enables it.

#+be                                                                                                                                                                                                                             gin_src emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(define-                                                                                                                                                                                                                         globalized-minor-mode                                                                                                global-rainbow-mode rainbow-mode
  (lambda () (rainbow-mode 1)))
(                                                                                                                                                                                                                                global-rainbow-mode 1 )
#+end_src

** RE                                                                                                                                                                                                                            GISTERS
Emacs re                                                                                                                                                                                                                         gisters are compartments where you can save text, rectan                                                             gles and positions for later use. Once you save text or a rectan                                              gle in a re                                                                                                                                                                                       gister, you can copy it into the buffer once or many times; once you save a position in a re                                                                                                 gister, you can jump back to that position once or many times.  The default GNU Emacs keybindin                                                                                  gs for these commands (with the exception of counsel-re                                                                     gister) involves 'C-x r' followed by one or more other keys.  I wanted to make this a little more user friendly, and since I am using Doom Emacs, I choose to replace the 'C-x r' part of the key chords with 'SPC r'.

| COMMAND                          | DESCRIPTION                      | KEYBINDIN                                                                                                                                                G |
|----------------------------------+----------------------------------+------------|
| copy-to-re                                                                                                                                                                                                                     gister                 | /Copy to re                                                                                 gister/                 | SPC r c    |
| frameset-to-re                                                                                                                                                                                                                 gister             | /Frameset to re                                                                                 gister/             | SPC r f    |
| insert-re                                                                                                                                                                                                                      gister                  | /Insert contents of re                                                                     gister/      | SPC r i    |
| jump-to-re                                                                                                                                                                                                                     gister                 | /Jump to re                                                                                 gister/                 | SPC r j    |
| list-re                                                                                                                                                                                                                        gisters                   | /List re                                                                                 gisters/                   | SPC r l    |
| number-to-re                                                                                                                                                                                                                   gister               | /Number to re                                                                                 gister/               | SPC r n    |
| counsel-re                                                                                                                                                                                                                     gister                 | /Interactively choose a re                                                                  gister/  | SPC r r    |
| view-re                                                                                                                                                                                                                        gister                    | /View a re                                                                               gister/                  | SPC r v    |
| window-confi                                                                                                                                                                                                                   guration-to-re                                                                                                       gister | /Window confi                                                                                        guration to re                                                                                                                                                                                    gister/ | SPC r w    |
| increment-re                                                                                                                                                                                                                   gister               | /Increment re                                                                                 gister/               | SPC r +    |
| point-to-re                                                                                                                                                                                                                    gister                | /Point to re                                                                                 gister/                | SPC r SPC  |

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(map! :leader
      (:prefix ("r" . "re                                                                                                                                                                                                        gisters")
       :desc "Copy to re                                                                                                                                                                                                         gister" "c" #'copy-to-re                                                                                             gister
       :desc "Frameset to re                                                                                                                                                                                                     gister" "f" #'frameset-to-re                                                                                         gister
       :desc "Insert contents of re                                                                                                                                                                                              gister" "i" #'insert-re                                                                                              gister
       :desc "Jump to re                                                                                                                                                                                                         gister" "j" #'jump-to-re                                                                                             gister
       :desc "List re                                                                                                                                                                                                            gisters" "l" #'list-re                                                                                               gisters
       :desc "Number to re                                                                                                                                                                                                       gister" "n" #'number-to-re                                                                                           gister
       :desc "Interactively choose a re                                                                                                                                                                                          gister" "r" #'counsel-re                                                                                             gister
       :desc "View a re                                                                                                                                                                                                          gister" "v" #'view-re                                                                                                gister
       :desc "Window confi                                                                                                                                                                                                       guration to re                                                                                                       gister" "w" #'window-confi                                                                                    guration-to-re                                                                                                                                                                                    gister
       :desc "Increment re                                                                                                                                                                                                       gister" "+" #'increment-re                                                                                           gister
       :desc "Point to re                                                                                                                                                                                                        gister" "SPC" #'point-to-re                                                                                          gister))
#+END_SRC

** SHELLS
Settin                                                                                                                                                                                                                           gs for the various shells and terminal emulators within Emacs.
+ 'shell-file-name' -- sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.
+ 'eshell-aliases-file' -- sets an aliases file for the eshell.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(setq shell-file-name "/bin/fish"
      vterm-max-scrollback 5000)
(setq eshell-rc-script "~/.confi                                                                                                                                                                                                 g/doom/eshell/profile"
      eshell-aliases-file "~/.confi                                                                                                                                                                                              g/doom/eshell/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-i                                                                                                                                                                                                              gnoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
(map! :leader
      :desc "Eshell" "e s" #'eshell
      :desc "Eshell popup to                                                                                                                                                                                                     g                                                                                                                    gle" "e t" #'+eshell/to                                                                                       g                                                                                                                                                                                                 gle
      :desc "Counsel eshell history" "e h" #'counsel-esh-history
      :desc "Vterm popup to                                                                                                                                                                                                      g                                                                                                                    gle" "v t" #'+vterm/to                                                                                        g                                                                                                                                                                                                 gle)
#+END_SRC

** SPLITS
I set splits to default to openin                                                                                                                                                                                                g on the ri                                                                                                          ght usin                                                                                                      g 'prefer-horizontal-split'.  I set a keybindin                                                                                                                                                   g for 'clone-indirect-buffer-other-window' for when I want to have the same document in two splits.  The text of the indirect buffer is always identical to the text of its base buffer; changes made by editin                                                          g either one are visible immediately in the other.  But in all other respects, the indirect buffer and its base buffer are completely separate.  For example, I can fold one split but other will be unfolded.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(defun prefer-horizontal-split ()
  (set-variable 'split-hei                                                                                                                                                                                                       ght-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window" "b c" #'clone-indirect-buffer-other-window)
#+END_SRC

** WINNER MODE
Winner mode has been included with                                                                                                                                                                                               GNU Emacs since version 20.  This is a                                                                               global minor mode and, when activated, it allows you to “undo” (and “redo”) chan                              ges in the window confi                                                                                                                                                                           guration with the key commands 'SCP w <left>' and 'SPC w <ri                                                                                                                                 ght>'.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(map! :leader
      (:prefix ("w" . "window")
       :desc "Winner redo" "<ri                                                                                                                                                                                                  ght>" #'winner-redo
       :desc "Winner undo" "<left>" #'winner-undo))
#+END_SRC

** ZAP TO CHAR
Emacs provides a 'zap-to-char' command that kills from the current point to a character.  It is bound to 'M-z' in standard                                                                                                       GNU Emacs but since Doom Emacs uses 'SPC' as its leader key and does not have 'SPC z' binded to anythin              g, it just makes since to use it for 'zap-to-char'.  Note that 'zap-to-char' can be used with the universal argument 'SPC u' to modify its behavior.  Examples of 'zap-to-char' usa                                                                                                                             ge are listed in the table below:

| KEYBINDIN                                                                                                                                                                                                                      G                | WHAT IS DOES                                               |
|---------------------------+------------------------------------------------------------|
| SPC z e                   | deletes all chars to the next occurrence of 'e'            |
| SPC u 2 SPC z e           | deletes all chars to the second occurrence of 'e'          |
| SPC u - SPC z e           | deletes all chars to the previous occurrence of 'e'        |
| SPC u -2 SPC z e          | deletes all chars to the fourth previous occurrence of 'e' |
| SPC u 1 0 0 SPC u SPC z e | deletes all chars to the 100th occurrence of 'e'           |

=TIP:= The universal ar                                                                                                                                                                                                          gument (SPC u) can only take a sin                                                                                   gle inte                                                                                                      ger by default.  If you need to use a multi-di                                                                                                                                                    git number (like 100 in the last example in the table above), then you must terminate the universal ar                                                                                       gument with another 'SPC u' after typin                                     g the number.

'zap-up-to-char' is an alternative command that does not zap the char specified.  It is binded to 'SPC Z'.  It can also be used in conjunction with the universal ar                                                             gument 'SPC u' in similar fashion to the the 'zap-to-char' examples above.

=NOTE:= Vim (evil mode) has similar functionality builtin.  You can delete to the next occurrence of 'e' by usin                                                                                                                 g 'dte' in normal.  To delete to the next occurrence of 'e' includin                                                 g the 'e', then you would use 'dfe'.  And you can modify 'dt' and 'df' by prefixin                            g them with numbers, so '2dte' would delete to the second occurrence of 'e'.

#+BE                                                                                                                                                                                                                             GIN_SRC emacs-lisp :tan                                                                                              gle /home/arthur/.confi                                                                                       g/doom/confi                                                                                                                                                                                      g.el
(map! :leader
      :desc "Zap to char" "z" #'zap-to-char
      :desc "Zap up to char" "Z" #'zap-up-to-char)
#+END_SRC
* Picom
This is Xorg compositor
https://github.com/jonaburg/picom
https://wiki.archlinux.org/title/Picom
config here `/etc/xdg/picom.conf`
if using fork of jonaburg, need to remove '.example'
