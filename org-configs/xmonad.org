#+TITLE: Xmonad
#+STARTUP: overview

[[../CONFIG.org][BACK]]
* Table of Contents :toc:
- [[#about-this-config][About This Config]]
- [[#imports][Imports]]
- [[#variables][Variables]]
- [[#autostart-the-startup-hook][Autostart (The Startup Hook)]]
- [[#gridselect][Gridselect]]
- [[#scratchpads][Scratchpads]]
- [[#layouts][Layouts]]
- [[#workspaces][Workspaces]]
- [[#managehook][Managehook]]
- [[#keybindings][Keybindings]]
- [[#main][Main]]

* About This Config
#+CAPTION: XMonad Scrot
#+ATTR_HTML: :alt XMonad Scrot :title XMonad Scrot :align left
[[https://gitlab.com/dwt1/dotfiles/-/raw/master/.screenshots/dotfiles05-thumb.png]]

Xmonad is a dynamically tiling X11 window manager that is written and configured in Haskell.
- XMonad Official Website: [[https://xmonad.org][https://xmonad.org]]
- Haskell Official Website: https://haskell.org

This config is based on the xmonad configuration of Derek Taylor (DistroTube)
- DT's YouTube: [[http://www.youtube.com/c/DistroTube][http://www.youtube.com/c/DistroTube]]
- DT's GitLab:  [[http://www.gitlab.com/dwt1/][http://www.gitlab.com/dwt1/]]

Keep in mind, that my configs are purposely bloated with examples of what you can do with xmonad. It is written more as a study guide rather than a config that you should download and use.

NOTE: You will also need DT's xmobar config, which is located here: https://gitlab.com/dwt1/dotfiles/-/tree/master/.config/xmobar

* Imports
These are Haskell modules that we must import so that we can use their functions later in the config.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
  -- Base
import XMonad
import System.Directory
import System.IO (hPutStrLn)
import System.Exit (exitSuccess)
import qualified XMonad.StackSet as W

    -- Actions
import XMonad.Actions.CopyWindow (kill1)
import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
import XMonad.Actions.GridSelect
import XMonad.Actions.MouseResize
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
import XMonad.Actions.WindowGo (runOrRaise)
import XMonad.Actions.WithAll (sinkAll, killAll)
import qualified XMonad.Actions.Search as S
import XMonad.Actions.GroupNavigation
import XMonad.Actions.SpawnOn

    -- Data
import Data.Char (isSpace, toUpper)
import Data.Maybe (fromJust)
import Data.Monoid
import Data.Maybe (isJust)
import Data.Tree
import qualified Data.Map as M

    -- Hooks
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
import XMonad.Hooks.EwmhDesktops  -- for some fullscreen events, also for xcomposite in obs.
import XMonad.Hooks.ManageDocks (avoidStruts, docksEventHook, manageDocks, ToggleStruts(..))
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat, doCenterFloat)
import XMonad.Hooks.ServerMode
import XMonad.Hooks.SetWMName
import XMonad.Hooks.WorkspaceHistory

    -- Layouts
import XMonad.Layout.Accordion
import XMonad.Layout.GridVariants (Grid(Grid))
import XMonad.Layout.SimplestFloat
import XMonad.Layout.Spiral
import XMonad.Layout.ResizableTile
import XMonad.Layout.Tabbed
import XMonad.Layout.ThreeColumns

    -- Layouts modifiers
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.Magnifier
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.ShowWName
import XMonad.Layout.Simplest
import XMonad.Layout.Spacing
import XMonad.Layout.SubLayouts
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import XMonad.Layout.WindowNavigation
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))

   -- Utilities
import XMonad.Util.Dmenu
import XMonad.Util.EZConfig (additionalKeysP)
import XMonad.Util.NamedScratchpad
import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
import XMonad.Util.SpawnOnce

   -- ColorScheme module (SET ONLY ONE!)
      -- Possible choice are:
      -- DoomOne
      -- Dracula
      -- GruvboxDark
      -- MonokaiPro
      -- Nord
      -- OceanicNext
      -- Palenight
      -- SolarizedDark
      -- SolarizedLight
      -- TomorrowNight
import Colors.Dracula
#+END_SRC

* Variables
It's nice to assign values to stuff that you will use more than once in the config. Setting values for things like font, terminal and editor means you only have to change the value here to make changes globally.
--------------------------------------------------------------------
There is a way to define modkey as CAPS_LOCK:
#+begin_src haskell
xmodmap -e "remove Lock = Caps_Lock"
xmodmap -e "clear mod2"
xmodmap -e "add Mod2 = Caps_Lock"

#define MODKEY Mod2Mask
#+end_src
--------------------------------------------------------------------
#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myFont :: String
myFont = "xft:SauceCodePro Nerd Font Mono:regular:size=9:antialias=true:hinting=true"

--myModMask :: KeyMask
--myModMask = mod4Mask        -- Sets modkey to super/windows key

myTerminal :: String
myTerminal = "alacritty"    -- Sets default terminal

myBrowser :: String
myBrowser = "firefox"  -- Sets default browser

myEmacs :: String
myEmacs = "emacsclient -c -a 'emacs' "  -- Makes emacs keybindings easier to type

myEditor :: String
myEditor = "emacsclient -c -a 'emacs' "  -- Sets emacs as editor
-- myEditor = myTerminal ++ " -e vim "    -- Sets vim as editor

myBorderWidth :: Dimension
myBorderWidth = 2           -- Sets border width for windows

myNormColor :: String       -- Border color of normal windows
myNormColor   = colorBack   -- This variable is imported from Colors.THEME

myFocusColor :: String      -- Border color of focused windows
myFocusColor  = color15     -- This variable is imported from Colors.THEME

windowCount :: X (Maybe String)
windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

-- Non-numeric num pad keys, sorted by number
numPadKeys = [ xK_KP_End,  xK_KP_Down,  xK_KP_Page_Down -- 1, 2, 3
             , xK_KP_Left, xK_KP_Begin, xK_KP_Right     -- 4, 5, 6
             , xK_KP_Home, xK_KP_Up,    xK_KP_Page_Up   -- 7, 8, 9
             , xK_KP_Insert] -- 0
numPadKeysP = [ "<KP_End>",  "<KP_Down>", "<KP_Page_Down>" -- 1, 2, 3
             , "<KP_Left>", "<KP_Begin>", "<KP_Right>"     -- 4, 5, 6
             , "<KP_Home>", "<KP_Up>",    "<KP_Page_Up>"   -- 7, 8, 9
             , "<KP_Insert>"] -- 0
#+END_SRC

* Autostart (The Startup Hook)
These are commands we want XMonad to execute on startup, such as running a compositor, setting our wallpaper, starting the emacs daemon, and starting our system tray and the applications that belong in it.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myStartupHook :: X ()
myStartupHook = do
    -- spawn "killall conky"   -- kill current conky on each restart
    spawn "killall trayer"  -- kill current trayer on each restart
#+END_SRC

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
    spawnOnce "lxsession"
    -- setting displays
    spawnOnce "xrandr --output HDMI-0 --off --output HDMI-1 --off --output HDMI-2 --off --output DP-0 --primary --mode 2560x1440 --pos 0x0 --rotate normal --output DP-1 --off --output DP-2 --off --output DP-3 --off --output DP-4 --mode 2560x1080 --pos 2560x180 --rotate normal --output DP-5 --off"
    spawnOnce "picom --xrender-sync-fence"
    spawnOnce "nm-applet"
    spawnOnce "volumeicon"
    spawnOnce "~/Applications/Kensington_Expert_Setup.sh"
    spawnOnce "numlockx &"
    spawnOnce "klipper &"
    spawnOnce "xsetroot -cursor_name left_ptr"
    spawnOnce "systemctl --user start syncthing.service"
    spawnOnce "/usr/bin/emacs --daemon" -- emacs daemon for the emacsclient
    spawnOnce "export QT_QPA_PLATFORMTHEME=\"qt5ct\"" -- emacs daemon for the emacsclient
    -- spawnOn "2:code" "emacs" -- spawn app in specific workspace
#+END_SRC

We killed any running conky and trayer processes earlier in the autostart, so now we sleep for 2 seconds and then restart conky and trayer.
#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
    -- spawn ("sleep 2 && conky -c $HOME/.config/conky/xmonad/" ++ colorScheme ++ "-01.conkyrc")
    spawn ("sleep 2 && trayer --edge top --align right --widthtype request --padding 2 --SetDockType true --SetPartialStrut true --expand true --monitor 0 --transparent true --alpha 0 " ++ colorTrayer ++ " --height 22")
#+END_SRC

Select only =ONE= of the following four ways to set the wallpaper.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
    -- spawnOnce "xargs xwallpaper --stretch < ~/.cache/wall"
    -- spawnOnce "~/.fehbg &"  -- set last saved feh wallpaper
    spawnOnce "feh --randomize --bg-fill /usr/share/backgrounds/dtos-backgrounds/*"  -- feh set random wallpaper
    spawnOnce "setxkbmap -layout us,ru -option grp:win_space_toggle"  -- keyboard_layout_switcher analog
    spawnOnce "kbdd"  -- kbd layout for each app
    -- spawnOnce "nitrogen --restore &"   -- if you prefer nitrogen to feh
    setWMName "LG3D" -- for java compitability
    -- set mouse start position
    spawnOnce "xdotool mousemove 1280 720"
#+END_SRC

* Gridselect
GridSelect displays items (programs, open windows, etc.) in a 2D grid and lets the user select from it with the cursor/hjkl keys or the mouse.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myColorizer :: Window -> Bool -> X (String, String)
myColorizer = colorRangeFromClassName
                  (0x28,0x2c,0x34) -- lowest inactive bg
                  (0x28,0x2c,0x34) -- highest inactive bg
                  (0xc7,0x92,0xea) -- active bg
                  (0xc0,0xa7,0x9a) -- inactive fg
                  (0x28,0x2c,0x34) -- active fg

-- gridSelect menu layout
mygridConfig :: p -> GSConfig Window
mygridConfig colorizer = (buildDefaultGSConfig myColorizer)
    { gs_cellheight   = 40
    , gs_cellwidth    = 200
    , gs_cellpadding  = 6
    , gs_originFractX = 0.5
    , gs_originFractY = 0.5
    , gs_font         = myFont
    }

spawnSelected' :: [(String, String)] -> X ()
spawnSelected' lst = gridselect conf lst >>= flip whenJust spawn
    where conf = def
                   { gs_cellheight   = 40
                   , gs_cellwidth    = 200
                   , gs_cellpadding  = 6
                   , gs_originFractX = 0.5
                   , gs_originFractY = 0.5
                   , gs_font         = myFont
                   }

myAppGrid = [ ("Blender", "Blender")
            , ("Lutris", "lutris")
            , ("LibreOffice", "libreoffice")
            , ("Emacs", "emacsclient -c -a emacs")
            , ("Pycharm", "pycharm")
            , ("Eclipse", "eclipse")
            , ("Onlyoffice", "onlyoffice")
            , ("VSCode", "code-oss")
            , ("Bottles", "gamemoderun bottles")
            , ("Gimp", "gimp")
            , ("ProtonVPN", "protonvpn")
            , ("KDEconnect", "kdeconnect-app")
            , ("Steam", "gamemoderun steam")]
#+END_SRC

* Scratchpads
Allows to have several floating scratchpads running different applications.  Import Util.NamedScratchpad and bind a key to namedScratchpadSpawnAction.  In the example below, I have created named scratchpads for:
+ alacritty -- my terminal
+ mocp -- a terminal music player
+ qalculate-gtk -- a nice calculator

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myScratchPads :: [NamedScratchpad]
myScratchPads = [ NS "terminal" spawnTerm findTerm manageTerm
                , NS "mocp" spawnMocp findMocp manageMocp
                , NS "calculator" spawnCalc findCalc manageCalc
                ]
  where
    spawnTerm  = myTerminal ++ " -t scratchpad"
    findTerm   = title =? "scratchpad"
    manageTerm = customFloating $ W.RationalRect l t w h
               where
                 h = 0.9
                 w = 0.9
                 t = 0.95 -h
                 l = 0.95 -w
    spawnMocp  = myTerminal ++ " -t mocp -e mocp"
    findMocp   = title =? "mocp"
    manageMocp = customFloating $ W.RationalRect l t w h
               where
                 h = 0.9
                 w = 0.9
                 t = 0.95 -h
                 l = 0.95 -w
    spawnCalc  = "qalculate-gtk"
    findCalc   = className =? "Qalculate-gtk"
    manageCalc = customFloating $ W.RationalRect l t w h
               where
                 h = 0.5
                 w = 0.4
                 t = 0.75 -h
                 l = 0.70 -w
#+END_SRC

* Layouts
Defining the layouts that I want to have available.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
--Makes setting the spacingRaw simpler to write. The spacingRaw module adds a configurable amount of space around windows.
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

-- Below is a variation of the above except no borders are applied
-- if fewer than two windows. So a single window has no gaps.
mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True

-- Defining a bunch of layouts, many that I don't use.
-- limitWindows n sets maximum number of windows displayed for layout.
-- mySpacing n sets the gap size around the windows.
tall     = renamed [Replace "tall"]
           $ smartBorders
           $ windowNavigation
           -- $ addTabs shrinkText myTabTheme
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 12
           $ mySpacing 3
           $ ResizableTall 1 (3/100) (1/2) []
wideAccordion  = renamed [Replace "wideAccordion"]
           $ Mirror Accordion
floats   = renamed [Replace "floats"]
           $ smartBorders
           $ limitWindows 20 simplestFloat
--magnify  = renamed [Replace "magnify"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ magnifier
--           $ limitWindows 12
--           $ mySpacing 8
--           $ ResizableTall 1 (3/100) (1/2) []
--monocle  = renamed [Replace "monocle"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ limitWindows 20 Full
--grid     = renamed [Replace "grid"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ limitWindows 12
--           $ mySpacing 0
--           $ mkToggle (single MIRROR)
--           $ Grid (16/10)
--spirals  = renamed [Replace "spirals"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ mySpacing' 8
--           $ spiral (6/7)
--threeCol = renamed [Replace "threeCol"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ limitWindows 7
--           $ ThreeCol 1 (3/100) (1/2)
--threeRow = renamed [Replace "threeRow"]
--           $ smartBorders
--           $ windowNavigation
--           $ addTabs shrinkText myTabTheme
--           $ subLayout [] (smartBorders Simplest)
--           $ limitWindows 7
           -- Mirror takes a layout and rotates it by 90 degrees.
           -- So we are applying Mirror to the ThreeCol layout.
--           $ Mirror
--           $ ThreeCol 1 (3/100) (1/2)
-- tabs     = renamed [Replace "tabs"]
           -- I cannot add spacing to this layout because it will
           -- add spacing between window and tabs which looks bad.
--           $ tabbed shrinkText myTabTheme
--tallAccordion  = renamed [Replace "tallAccordion"]
--           $ Accordion

-- setting colors for tabs layout and tabs sublayout.
--myTabTheme = def { fontName            = myFont
--                 , activeColor         = color15
--                 , inactiveColor       = color08
--                 , activeBorderColor   = color15
--                 , inactiveBorderColor = colorBack
--                 , activeTextColor     = colorBack
--                 , inactiveTextColor   = color16
--                 }

-- Theme for showWName which prints current workspace when you change workspaces.
myShowWNameTheme :: SWNConfig
myShowWNameTheme = def
    { swn_font              = "xft:Ubuntu:bold:size=60"
    , swn_fade              = 1.0
    , swn_bgcolor           = "#1c1f24"
    , swn_color             = "#ffffff"
    }

-- The layout hook
myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats
               $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
             where
               myDefaultLayout = withBorder myBorderWidth tall
                                 ||| wideAccordion
                                 ||| floats
                                 -- ||| noBorders tabs
                                 -- ||| magnify
                                 -- ||| noBorders monocle
                                 -- ||| grid
                                 -- ||| spirals
                                 -- ||| threeCol
                                 -- ||| threeRow
                                 -- ||| tallAccordion
#+END_SRC

* Workspaces
I have made my workspaces in xmobar "clickable." Clickable workspaces means the mouse can be used to switch workspaces. This requires /xdotool/ to be installed. You need to use UnsafeStdInReader instead of simply StdInReader in your xmobar config so you can pass actions to it.

#+begin_src haskell :tangle /home/arthur/.xmonad/xmonad.hs
-- myWorkspaces = [" 1 ", " 2 ", " 3 ", " 4 ", " 5 ", " 6 ", " 7 ", " 8 ", " 9 "]
myWorkspaces = [" main ", " doc ", " www ", " dev ", " mes ", " util ", " add1 ", " add2 ", " add3 "]
myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,
myWorkspacesNums = ["1","2","3","4","5","6","7","8","9"]

clickable ws = "<action=xdotool key alt+"++show i++">"++ws++"</action>"
    where i = fromJust $ M.lookup ws myWorkspaceIndices

#+END_SRC

* Managehook
Sets some rules for certain programs. Examples include forcing certain programs to always float, or to always appear on a certain workspace.  Forcing programs to a certain workspace with a doShift requires xdotool if you are using clickable workspaces. You need the className or title of the program. Use xprop to get this info.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
     -- 'doFloat' forces a window to float.  Useful for dialog boxes and such.
     -- using 'doShift ( myWorkspaces !! 7)' sends program to workspace 8!
     -- I'm doing it this way because otherwise I would have to write out the full
     -- name of my workspaces and the names would be very long if using clickable workspaces.
     [ className =? "confirm"         --> doFloat
     , className =? "file_progress"   --> doFloat
     , className =? "dialog"          --> doFloat
     , className =? "download"        --> doFloat
     , className =? "error"           --> doFloat
     --, className =? "Gimp"            --> doFloat
     --, className =? "Blender"         --> doFloat
     --, className =? "Eclipse"         --> doFloat
     , className =? "notification"    --> doFloat
     , className =? "pinentry-gtk-2"  --> doFloat
     , className =? "splash"          --> doFloat
     , className =? "toolbar"         --> doFloat
     , className =? "Yad"             --> doCenterFloat
     , className =? "klipper"         --> doCenterFloat
     --, className =? "tdrop"           --> doCenterFloat
     , title =? "Oracle VM VirtualBox Manager"  --> doFloat
     , title =? "Mozilla Firefox"     --> doShift ( myWorkspaces !! 2 )
     , className =? "Brave-browser"   --> doShift ( myWorkspaces !! 2 )
     , className =? "mpv"             --> doShift ( myWorkspaces !! 7 )
     --, className =? "Gimp"            --> doShift ( myWorkspaces !! 8 )
     , className =? "VirtualBox Manager" --> doShift  ( myWorkspaces !! 6 )
     , (className =? "firefox" <&&> resource =? "Dialog") --> doFloat  -- Float Firefox Dialog
     , isFullscreen -->  doFullFloat
     ] <+> namedScratchpadManageHook myScratchPads
#+END_SRC

Sets indication of active display / screen *not tangle now*
#+BEGIN_SRC haskell
focusedTitleOnScreen :: ScreenId -> X (String -> String)
focusedTitleOnScreen n = do
    ws <- gets windowset
    let ss = (W.current ws) : (W.visible ws)
        s  = L.find ((n==) . W.screen) ss
        t  = maybe Nothing
                   (W.stack . W.workspace)
                   s
    m <- maybe (return "<empty>")
               (fmap show . getName . W.focus)
               t
    let x = if n == (W.screen . W.current) ws
               then xmobarColor myppCurrentFg myppCurrentBg . wrap " " " " $ m
               else xmobarColor "grey"  ""      $ m
    return (\ _ -> x)

workspaceOnScreen :: ScreenId -> X (String -> String)
workspaceOnScreen n = do
   w <- gets windowset
   let tag = fromMaybe "<???>" $ W.lookupWorkspace n w
       foc = W.currentTag w
       fmt1 = if tag == foc then cur else vis
          where
            cur = xmobarColor myppCurrentFg myppCurrentBg
            vis = xmobarColor myppCurrentFg myppVisibleBgCur
   return fmt1

visibleOnScreen :: ScreenId -> X (String -> String)
visibleOnScreen n = do
   w <- gets windowset
   let tag = fromMaybe "<???>" $ W.lookupWorkspace n w
       foc = W.currentTag w
       fmt1 = if tag == foc then cur else vis
          where
            cur = xmobarColor myppCurrentFg myppVisibleBg
            vis = xmobarColor myppCurrentFg myppVisibleBgFocus
   return fmt1


myLogHook :: XConfig l -> Handle -> Handle -> X ()
myLogHook c u0 u1 = do
    g0 <- focusedTitleOnScreen 0
    g1 <- focusedTitleOnScreen 1
    h0 <- workspaceOnScreen 0
    h1 <- workspaceOnScreen 1
    v0 <- visibleOnScreen 0
    v1 <- visibleOnScreen 1

    idHook
       <+> dynamicLogWithPP (topPP u0 g0 h0 v0)
       <+> dynamicLogWithPP (topPP u1 g1 h1 v1)
       <+> ewmhDesktopsLogHook
       <+> logHook c

             where
                topPP u g h v = namedScratchpadFilterOutWorkspacePP $ defaultPP
                   { ppOutput   = hPutStrLn u
                   , ppCurrent  = h
                   , ppVisible  = v
                   , ppHidden   = xmobarColor myppHiddenFg myppHiddenBg
                   , ppHiddenNoWindows = xmobarColor  myppHiddenNoWindowsFg myppHiddenNoWindowsBg
                   , ppSep =  "  "                     -- Separators in xmobar
                   , ppWsSep    = " "
                   , ppTitle    = g
                   , ppExtras = [windowCount]                          -- # of windows current workspace
                   , ppOrder  = \(ws:l:t:ex) -> [ws, l, t] ++ ex
                   }
#+END_SRC

* Keybindings
I am using the Xmonad.Util.EZConfig module which allows keybindings to be written in simpler, emacs-like format.  The Super/Windows key is 'M4'.  The ALT key is 'M1'.  SHIFT is 'S' and CTR is 'C'. Mod key is 'M'.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs

myKeys :: [(String, X ())]
myKeys =
    -- KB_GROUP Xmonad
        [ ("M4-C-r", spawn "xmonad --recompile")       -- Recompiles xmonad
        , ("M4-S-r", spawn "xmonad --restart")         -- Restarts xmonad
        , ("M4-S-l", io exitSuccess)                   -- Quits xmonad
        , ("M4-l", spawn "slock")                      -- Lock screen
        -- , ("M4-<Space>", spawn "/home/arthur/Applications/keyboard_layout_switcher.sh") -- Switch layout ru/en

    -- KB_GROUP default alt+TAB functionality
        , ("M-<BackSpace>", nextMatch Backward (return True)) -- navigate aka alt+tab
        , ("M-<Tab>", spawn "rofi -show window -line-padding 4 -lines 6 -padding 50 -hide-scrollbar -show-icons -drun-icon-theme 'Arc-X-D' -font 'Droid Sans Regular 10'") -- get list of all open windows

    -- KB_GROUP Layouts
        , ("M4-<Tab>", sendMessage NextLayout)                                  -- Switch to next layout
        , ("M-S-m", sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts) -- Toggles noborder/full

    -- KB_GROUP Increase/decrease windows in the master pane or the stack
        , ("M-S-<Up>", sendMessage (IncMasterN 1))      -- Increase # of clients master pane
        , ("M-S-<Down>", sendMessage (IncMasterN (-1))) -- Decrease # of clients master pane
        , ("M-C-<Up>", increaseLimit)                   -- Increase # of windows
        , ("M-C-<Down>", decreaseLimit)                 -- Decrease # of windows

    -- KB_GROUP Window resizing
        , ("M-M4-h", sendMessage Shrink)                -- Shrink horiz window width
        , ("M-M4-l", sendMessage Expand)                -- Expand horiz window width
        , ("M-M4-j", sendMessage MirrorShrink)          -- Shrink vert window width
        , ("M-M4-k", sendMessage MirrorExpand)          -- Expand vert window width

    -- KB_GROUP numpad layouts
        --, ("M-<KP_End>", spawn "dolphin")
        --, ("M-<KP_Down>", spawn "dolphin")
        --, ("M-<KP_Page_Down>", spawn "dolphin")
        --, ("M-<KP_Left>", spawn "dolphin")
        --, ("M-<KP_Begin>", spawn "dolphin")
        --, ("M-<KP_Right>", spawn "dolphin")
        --, ("M-<KP_Home>", spawn "dolphin")
        --, ("M-<KP_Up>", spawn "dolphin")
        --, ("M-<KP_Page_Up>", spawn "dolphin")

    -- KB_GROUP Get Help
        , ("M-S-/", spawn "~/.xmonad/xmonad_keys.sh") -- Get list of keybindings
        , ("M-/", spawn "dtos-help")                  -- DTOS help/tutorial videos

    -- KB_GROUP Run Prompt
        , ("M-<Space>", spawn "dmenu_run -fn 'Noto Sans:bold:pixelsize=24' -i -p \"Run: \"") -- Dmenu

    -- KB_GROUP Other Dmenu Prompts
    -- In Xmonad and many tiling window managers, M-p is the default keybinding to
    -- launch dmenu_run, so I've decided to use M-p plus KEY for these dmenu scripts.
        , ("M-p h", spawn "dm-hub -fn 'Noto Sans:bold:pixelsize=24' -i")           -- allows access to all dmscripts
        , ("M-p a", spawn "dm-sounds -fn 'Noto Sans:bold:pixelsize=24' -i")        -- choose an ambient background
        , ("M-p b", spawn "dm-setbg -fn 'Noto Sans:bold:pixelsize=24' -i")         -- set a background
        , ("M-p c", spawn "dtos-colorscheme -fn 'Noto Sans:bold:pixelsize=24' -i") -- choose a colorscheme
        , ("M-p C", spawn "dm-colpick -fn 'Noto Sans:bold:pixelsize=24' -i")       -- pick color from our scheme
        , ("M-p e", spawn "dm-confedit -fn 'Noto Sans:bold:pixelsize=24' -i")      -- edit config files
        , ("M-p i", spawn "dm-maim -fn 'Noto Sans:bold:pixelsize=24' -i")          -- screenshots (images)
        , ("M-p k", spawn "dm-kill -fn 'Noto Sans:bold:pixelsize=24' -i")          -- kill processes
        , ("M-p m", spawn "dm-man -fn 'Noto Sans:bold:pixelsize=24' -i")           -- manpages
        , ("M-p n", spawn "dm-note -fn 'Noto Sans:bold:pixelsize=24' -i")          -- store one-line notes and copy them
        , ("M-p o", spawn "dm-bookman -fn 'Noto Sans:bold:pixelsize=24' -i")       -- qutebrowser bookmarks/history
        , ("M-p p", spawn "passmenu -fn 'Noto Sans:bold:pixelsize=24' -i")         -- passmenu
        , ("M-p q", spawn "dm-logout -fn 'Noto Sans:bold:pixelsize=24' -i")        -- logout menu
        , ("M-p r", spawn "dm-radio -fn 'Noto Sans:bold:pixelsize=24' -i")         -- listen to online radio
        , ("M-p s", spawn "dm-websearch -fn 'Noto Sans:bold:pixelsize=24' -i")     -- search various search engines
        , ("M-p t", spawn "dm-translate -fn 'Noto Sans:bold:pixelsize=24' -i")     -- translate text (Google Translate)

    -- KB_GROUP Useful programs to have a keybinding for launch
        , ("M-<Return>", spawn (myTerminal))
        , ("M-b", spawn (myBrowser))
        , ("M-a a", spawn ("pamac-manager"))
        , ("M-a m", spawn ("manjaro-settings-manager"))
        , ("M4-e", spawn ("dolphin"))
        -- , ("M1-h", spawn (myTerminal ++ " -e htop"))

    -- KB_GROUP Kill windows
        , ("M-q", kill1)     -- Kill the currently focused client
        , ("M-S-q", killAll)   -- Kill all windows on current workspace

    -- KB_GROUP Workspaces
        , ("M-.", nextScreen)  -- Switch focus to next monitor
        , ("M-,", prevScreen)  -- Switch focus to prev monitor
        , ("M-S-<KP_Add>", shiftTo Next nonNSP >> moveTo Next nonNSP)       -- Shifts focused window to next ws
        , ("M-S-<KP_Subtract>", shiftTo Prev nonNSP >> moveTo Prev nonNSP)  -- Shifts focused window to prev ws

    -- KB_GROUP Floating windows
        , ("M-f", sendMessage (T.Toggle "floats")) -- Toggles my 'floats' layout
        , ("M-t", withFocused $ windows . W.sink)  -- Push floating window back to tile
        , ("M-S-t", sinkAll)                       -- Push ALL floating windows to tile

    -- KB_GROUP Increase/decrease spacing (gaps)
        -- , ("M-C-j", decWindowSpacing 4)         -- Decrease window spacing
        -- , ("M-C-k", incWindowSpacing 4)         -- Increase window spacing
        -- , ("M-C-h", decScreenSpacing 4)         -- Decrease screen spacing
        -- , ("M-C-l", incScreenSpacing 4)         -- Increase screen spacing

    -- KB_GROUP Grid Select (CTR-g followed by a key)
        , ("M-g g", spawnSelected' myAppGrid)                 -- grid select favorite apps
        , ("M-g t", goToSelected $ mygridConfig myColorizer)  -- goto selected window
        , ("M-g b", bringSelected $ mygridConfig myColorizer) -- bring selected window

    -- KB_GROUP Windows navigation
        , ("M-m", windows W.focusMaster)  -- Move focus to the master window
        , ("M-j", windows W.focusDown)    -- Move focus to the next window
        , ("M-k", windows W.focusUp)      -- Move focus to the prev window
        -- , ("M-S-m", windows W.swapMaster) -- Swap the focused window and the master window
        , ("M-S-j", windows W.swapDown)   -- Swap focused window with next window
        , ("M-S-k", windows W.swapUp)     -- Swap focused window with prev window
        , ("M-<Backspace>", promote)      -- Moves focused window to master, others maintain order
        , ("M-S-<Tab>", rotSlavesDown)    -- Rotate all windows except master and keep focus in place
        , ("M-C-<Tab>", rotAllDown)       -- Rotate all the windows in the current stack

    -- KB_GROUP Sublayouts
    -- This is used to push windows to tabbed sublayouts, or pull them out of it.
        , ("M-C-h", sendMessage $ pullGroup L)
        , ("M-C-l", sendMessage $ pullGroup R)
        , ("M-C-k", sendMessage $ pullGroup U)
        , ("M-C-j", sendMessage $ pullGroup D)
        , ("M-C-m", withFocused (sendMessage . MergeAll))
        -- , ("M-C-u", withFocused (sendMessage . UnMerge))
        , ("M-C-/", withFocused (sendMessage . UnMergeAll))
        , ("M-C-.", onGroup W.focusUp')    -- Switch focus to next tab
        , ("M-C-,", onGroup W.focusDown')  -- Switch focus to prev tab

    -- KB_GROUP Scratchpads
    -- Toggle show/hide these programs.  They run on a hidden workspace.
    -- When you toggle them to show, it brings them to your current workspace.
    -- Toggle them to hide and it sends them back to hidden workspace (NSP).
        , ("M-s t", namedScratchpadAction myScratchPads "terminal")
        , ("M-C-w", namedScratchpadAction myScratchPads "terminal")
        , ("M-s m", namedScratchpadAction myScratchPads "mocp")
        , ("M-s c", namedScratchpadAction myScratchPads "calculator")

    -- KB_GROUP Controls for mocp music player (SUPER-u followed by a key)
        , ("M-u p", spawn "mocp --play")
        , ("M-u l", spawn "mocp --next")
        , ("M-u h", spawn "mocp --previous")
        , ("M-u <Space>", spawn "mocp --toggle-pause")

    -- KB_GROUP Emacs (SUPER-e followed by a key)
        , ("M-e e", spawn (myEmacs ++ ("--eval '(dashboard-refresh-buffer)'")))   -- emacs dashboard
        , ("M-e c", spawn (myEmacs ++ ("/home/arthur/CONFIG.org")))   -- open CONFIG.ORG
        , ("M-e n", spawn (myEmacs ++ ("/home/arthur/Project/Notes/roam/20220507152159-notes.org")))   -- open roam notes system
        , ("M-e b", spawn (myEmacs ++ ("--eval '(ibuffer)'")))   -- list buffers
        , ("M-e d", spawn (myEmacs ++ ("--eval '(dired nil)'"))) -- dired
        , ("M-e i", spawn (myEmacs ++ ("--eval '(erc)'")))       -- erc irc client
        , ("M-e s", spawn (myEmacs ++ ("--eval '(eshell)'")))    -- eshell
        , ("M-e t", spawn (myEmacs ++ ("--eval '(mastodon)'")))  -- mastodon.el
        , ("M-e v", spawn (myEmacs ++ ("--eval '(+vterm/here nil)'"))) -- vterm if on Doom Emacs
        , ("M-e w", spawn (myEmacs ++ ("--eval '(doom/window-maximize-buffer(eww \"distro.tube\"))'"))) -- eww browser if on Doom Emacs
        , ("M-e a", spawn (myEmacs ++ ("--eval '(emms)' --eval '(emms-play-directory-tree \"~/Music/\")'")))

    -- KB_GROUP Multimedia Keys
        , ("<XF86AudioPlay>", spawn "mocp --play")
        , ("<XF86AudioPrev>", spawn "mocp --previous")
        , ("<XF86AudioNext>", spawn "mocp --next")
        , ("<XF86AudioMute>", spawn "amixer set Master toggle")
        , ("<XF86AudioLowerVolume>", spawn "amixer set Master 5%- unmute")
        , ("<XF86AudioRaiseVolume>", spawn "amixer set Master 5%+ unmute")
        , ("<XF86HomePage>", spawn "qutebrowser https://google.com")
        , ("<XF86Search>", spawn "dm-websearch")
        , ("<XF86Mail>", runOrRaise "thunderbird" (resource =? "thunderbird"))
        , ("<XF86Calculator>", runOrRaise "qalculate-gtk" (resource =? "qalculate-gtk"))
        , ("<XF86Eject>", spawn "toggleeject")
        , ("<Print>", spawn "dm-maim")
        ]
        ++ -- numpad switching workspaces
        [ (otherModMasks ++ "M-" ++ key, action tag)
          | (tag, key)  <- zip myWorkspaces numPadKeysP
        , (otherModMasks, action) <- [ ("", windows . W.greedyView) -- or W.view
                                     , ("S-", windows . W.shift)]
        ]

    -- The following lines are needed for named scratchpads.
          where nonNSP          = WSIs (return (\ws -> W.tag ws /= "NSP"))
                nonEmptyNonNSP  = WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))
-- END_KEYS
#+END_SRC

* Main
This is the "main" of XMonad. This where everything in our configs comes together and works.

#+BEGIN_SRC haskell :tangle /home/arthur/.xmonad/xmonad.hs
main :: IO ()
main = do
    -- Launching three instances of xmobar on their monitors.
    xmproc0 <- spawnPipe ("xmobar -x 0 $HOME/.config/xmobar/" ++ colorScheme ++ "-xmobarrc")
    xmproc1 <- spawnPipe ("xmobar -x 1 $HOME/.config/xmobar/" ++ colorScheme ++ "-xmobarrc")
    --xmproc2 <- spawnPipe ("xmobar -x 2 $HOME/.config/xmobar/" ++ colorScheme ++ "-xmobarrc")
    -- the xmonad, ya know...what the WM is named after!
    xmonad $ ewmh def
        { manageHook         = myManageHook <+> manageDocks
        , handleEventHook    = docksEventHook
                               -- Uncomment this line to enable fullscreen support on things like YouTube/Netflix.
                               -- This works perfect on SINGLE monitor systems. On multi-monitor systems,
                               -- it adds a border around the window if screen does not have focus. So, my solution
                               -- is to use a keybinding to toggle fullscreen noborders instead.  (M-<Space>)
                               -- <+> fullscreenEventHook
        --, modMask            = myModMask
        , terminal           = myTerminal
        , startupHook        = myStartupHook
        , layoutHook         = showWName' myShowWNameTheme $ myLayoutHook
        , workspaces         = myWorkspaces
        , borderWidth        = myBorderWidth
        , normalBorderColor  = myNormColor
        , focusedBorderColor = myFocusColor
        , logHook = dynamicLogWithPP $ namedScratchpadFilterOutWorkspacePP $ xmobarPP
              -- XMOBAR SETTINGS
              { ppOutput = \x -> hPutStrLn xmproc0 x   -- xmobar on monitor 1
                              >> hPutStrLn xmproc1 x   -- xmobar on monitor 2
                           -- >> hPutStrLn xmproc2 x   -- xmobar on monitor 3
                -- Current workspace
              , ppCurrent = xmobarColor color06 "" . wrap
                            ("<box type=Bottom width=2 mb=2 color=" ++ color06 ++ ">") "</box>"
                -- Visible but not current workspace
              , ppVisible = xmobarColor color06 "" . clickable
                -- Hidden workspace
              , ppHidden = xmobarColor color05 "" . wrap
                           ("<box type=Top width=2 mt=2 color=" ++ color05 ++ ">") "</box>" . clickable
                -- Hidden workspaces (no windows)
              , ppHiddenNoWindows = xmobarColor color05 ""  . clickable
                -- Title of active window
              , ppTitle = xmobarColor color16 "" . shorten 60
                -- Separator character
              , ppSep =  "<fc=" ++ color09 ++ "> <fn=1>|</fn> </fc>"
                -- Urgent workspace
              , ppUrgent = xmobarColor color02 "" . wrap "!" "!"
                -- Adding # of windows on current workspace to the bar
              , ppExtras  = [windowCount]
                -- order of things in xmobar
              , ppOrder  = \(ws:l:t:ex) -> [ws,l]++ex++[t]
              }
        } `additionalKeysP` myKeys
#+END_SRC
